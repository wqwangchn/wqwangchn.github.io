{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/bannera.jpg","path":"css/images/bannera.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"8260bdd5d127448cd0f9cd22757cc0351235729e","modified":1577954376428},{"_id":"source/CNAME","hash":"bb1038e6e5d2b9dc3d5c268727c721c5198b3c7f","modified":1577875988418},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1577875988419},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1577875988419},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1577875988419},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1577875988419},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1577944896661},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1577875988428},{"_id":"source/_posts/.DS_Store","hash":"3d09f9e4471a355d467c5ec6539f7ca5204e2cc9","modified":1578046755570},{"_id":"source/_posts/css小知识.md","hash":"2a1c85fd053c11c39f5116a963e1260721cdcf06","modified":1577956665230},{"_id":"source/_posts/gitlab_wiki操作.md","hash":"e7d2dea48f142e98b0f7ad7c5f27412fc6ac3c0d","modified":1577956578822},{"_id":"source/_posts/linux查看系统信息命令.md","hash":"ad2945aeb1550988b47170d2ec231b2721bf807c","modified":1577956578812},{"_id":"source/_posts/linux问题.md","hash":"c44c2050a3ee7a8c6dd2597fb01c92dbc5fe3637","modified":1577956578826},{"_id":"source/_posts/python语法.md","hash":"ec0f820147f49864a6cef2af87a07114f3454265","modified":1577956578820},{"_id":"source/_posts/vue原理.md","hash":"7c27d2e307523c47468a3567aa6b25d13fed3c3b","modified":1577956665232},{"_id":"source/_posts/改善python程序91个建议.md","hash":"e826f6bd6adcc0b198c8584448491f694775ab49","modified":1577956578815},{"_id":"source/_posts/源码算法.md","hash":"4b5a73b4496b14d6b247d4a0ef22e2f2f43812a5","modified":1577956578824},{"_id":"source/_posts/爬虫策略.md","hash":"858739d531b870378fb568a4ba147040e6fcfdc1","modified":1578046541690},{"_id":"source/_posts/移动数字金融与电子商务反欺诈白皮书.md","hash":"ef8e7b08a186223a962273c9fc5d029b52ac8211","modified":1578046896573},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1577875988420},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1577875988420},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1577875988420},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1577875988420},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1577875988420},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1577875988421},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1577875988421},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1577875988421},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1577875988421},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1577875988421},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1577875988421},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1577875988422},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1577875988426},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1577875988426},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1577875988426},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1577875988427},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1577875988427},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1577875988428},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1577875988428},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1577875988428},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1577875988422},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1577875988422},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1577875988422},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1577875988422},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1577875988422},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1577875988423},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1577875988423},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1577875988423},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1577875988423},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1577875988423},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1577875988425},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1577875988425},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1577875988425},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1577875988425},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1577875988425},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1577875988425},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1577875988428},{"_id":"themes/landscape/source/css/.DS_Store","hash":"ffc14968c0b6016c02d52e1c87398e207d1e383d","modified":1577947065825},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1577875988431},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1577875988435},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577875988436},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577875988436},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577875988436},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577875988436},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577875988436},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577875988436},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1577875988438},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1577875988438},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1577875988438},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1577875988439},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1577875988424},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1577875988424},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1577875988424},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1577875988424},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1577875988424},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1577875988424},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1577875988430},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1577875988430},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1577875988429},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1577875988429},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1577875988429},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1577875988429},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1577875988429},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1577875988430},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1577875988430},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1577875988430},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1577875988430},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1577875988430},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1577875988431},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1577875988431},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1577875988434},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577875988437},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1577875988437},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577875988437},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1577875988437},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1577875988438},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577875988437},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1577875988433},{"_id":"themes/landscape/source/css/images/bannera.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1577875988435},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1577875988433},{"_id":"source/_posts/aaaa.png","hash":"acbf093b5e0c43f3f356c0720bb56b4a870a3cec","modified":1539569341000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"d98b30ce758d8e8c0c867b9754603b991f28d6e0","modified":1577942975825},{"_id":"source/_posts/book_1.pdf","hash":"3038baaa0bf8acf469fa7aa604b5683556095f69","modified":1577106591678},{"_id":"public/2020/01/03/爬虫策略/index.html","hash":"54b2b89958066ccd9b345a969460e6070415bea1","modified":1578046901363},{"_id":"public/2020/01/02/移动数字金融与电子商务反欺诈白皮书/index.html","hash":"924a551a741f3bbed6935292e1ade87ba70c209c","modified":1578046901363},{"_id":"public/2020/01/02/vue原理/index.html","hash":"e403d69064a43c8815f2aad684e6446bce381120","modified":1578046901363},{"_id":"public/2020/01/02/css小知识/index.html","hash":"330f29a1826048fe00f47c6ae267fca10cc0ebd9","modified":1578046901363},{"_id":"public/2020/01/02/linux问题/index.html","hash":"0f52434bca562ebfb9023e34cc95a0417e8f22c5","modified":1578046901363},{"_id":"public/2020/01/02/源码算法/index.html","hash":"e4082220a81b81f2ff1bef899daf40d4cc2a9f7f","modified":1578046901363},{"_id":"public/2020/01/02/gitlab_wiki操作/index.html","hash":"1b17acbf04be06e4df07c769ff2d8d8ef54f5666","modified":1578046901363},{"_id":"public/2020/01/02/linux查看系统信息命令/index.html","hash":"23ee1d2e4c6ba7833d75525f8249187297b1579d","modified":1578046901363},{"_id":"public/tags/金额/index.html","hash":"8191b86ee0411caf8a62fcc9bcc37938ec7cfa53","modified":1578046297551},{"_id":"public/archives/2020/index.html","hash":"ba64604d28cab9e61bb649f47df6375915c83c3f","modified":1578046901363},{"_id":"public/archives/2020/01/index.html","hash":"1b3e944dce392a5fec4a4e9927b7e5fe0450d6ac","modified":1578046901363},{"_id":"public/archives/index.html","hash":"c15c0ca0c33bbd69496ff48ab20173ced1b1e33d","modified":1578046901363},{"_id":"public/categories/随笔/index.html","hash":"173374f3061c167e09edaa881db6bff3b829b2cc","modified":1578046901363},{"_id":"public/categories/前端/index.html","hash":"cdfdb6b298188ce7b6c91dd285de27294ad108eb","modified":1578046901363},{"_id":"public/2020/01/02/python语法/index.html","hash":"975354532278c3de50ac232dc5e62ba1f532c26a","modified":1578046901363},{"_id":"public/2020/01/02/改善python程序91个建议/index.html","hash":"12bfbcaf4933efbe3c545f5f1bc80829c5ff088d","modified":1578046901363},{"_id":"public/index.html","hash":"91777c507202efc4ee11122436cccd2445320741","modified":1578046901363},{"_id":"public/categories/work/index.html","hash":"8a17ae981546f6164e85447989e5919d6c79ce7f","modified":1578046901363},{"_id":"public/CNAME","hash":"bb1038e6e5d2b9dc3d5c268727c721c5198b3c7f","modified":1578046297551},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1578046297551},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1578046297551},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1578046297551},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1578046297551},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1578046297551},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1578046297551},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1578046297551},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1578046297551},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1578046297551},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1578046297551},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1578046297551},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1578046297551},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1578046297551},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1578046297551},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1578046297551},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1578046297551},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1578046297551},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1578046297551},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1578046297551},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1578046297551},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1578046297551},{"_id":"public/css/images/bannera.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1578046297551},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1578046297551},{"_id":"public/css/images/banner.jpg","hash":"d98b30ce758d8e8c0c867b9754603b991f28d6e0","modified":1578046297551},{"_id":"source/_posts/爬虫策略/aaaa.png","hash":"acbf093b5e0c43f3f356c0720bb56b4a870a3cec","modified":1539569341000},{"_id":"public/2020/01/03/爬虫策略/aaaa.png","hash":"acbf093b5e0c43f3f356c0720bb56b4a870a3cec","modified":1578046546921},{"_id":"source/_posts/移动数字金融与电子商务反欺诈白皮书/book_1.pdf","hash":"3038baaa0bf8acf469fa7aa604b5683556095f69","modified":1577106591678},{"_id":"public/2020/01/02/移动数字金融与电子商务反欺诈白皮书/book_1.pdf","hash":"3038baaa0bf8acf469fa7aa604b5683556095f69","modified":1578046761789},{"_id":"public/tags/金融/index.html","hash":"a9b66b92ddc9f3863893034d1e96fec79c0fbd00","modified":1578046901363}],"Category":[{"name":"随笔","_id":"ck4y00s9700026ds6b58r9dbt"},{"name":"前端","_id":"ck4y00s9c00066ds61p88hscu"},{"name":"work","_id":"ck4y00s9m000i6ds64i2o2eqn"}],"Data":[],"Page":[],"Post":[{"_content":"####gollum安装\n\ngollum是一个文档管理服务,依赖与Ruby，一般mac上会自带有Ruby\n\n```\n[sudo] gem install gollum\n```\n\n但是通过gem安装gollum的时候报错了,类似于下面这个错误（我当时的错误没有截图），<font color='red'>一般来说如果安装在源码.h文件报错一般会是开发包的问题。</font>这里其实就是少了`ruby-devel`包,所以接下来要安装ruby-devel包\n\n```shell\nERROR:  Error installing bluecloth:\nERROR: Failed to build gem native extension.\n \n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\nextconf.rb\nmkmf.rb can't find header files for ruby at\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/ruby.h\n\n```\n\n在linux上一般通过yum去管理包，ruby-devel 在百度上查到很多可以根据rpm去安装的，但是在mac上只有brew ，并且brew下还没有ruby-devel这个包文件，所以想到 rvm是ruby环境管理器，所以就试着用下面的命令安装了ruby-devel这个ruby开发包\n\n```\nrvm install ruby-devel\n```\n\n然后\n\n```\n[sudo] gem install gollum\n```\n\n<font color='red'>成功</font>\n\n默认gollum启动的接口为4567\n\nhttp://127.0.0.1:4567 就可以新建一个wiki页面进行编辑了\n\n","source":"_posts/gitlab_wiki操作.md","raw":"---\ncategories: 随笔\n---\n####gollum安装\n\ngollum是一个文档管理服务,依赖与Ruby，一般mac上会自带有Ruby\n\n```\n[sudo] gem install gollum\n```\n\n但是通过gem安装gollum的时候报错了,类似于下面这个错误（我当时的错误没有截图），<font color='red'>一般来说如果安装在源码.h文件报错一般会是开发包的问题。</font>这里其实就是少了`ruby-devel`包,所以接下来要安装ruby-devel包\n\n```shell\nERROR:  Error installing bluecloth:\nERROR: Failed to build gem native extension.\n \n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\nextconf.rb\nmkmf.rb can't find header files for ruby at\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/ruby.h\n\n```\n\n在linux上一般通过yum去管理包，ruby-devel 在百度上查到很多可以根据rpm去安装的，但是在mac上只有brew ，并且brew下还没有ruby-devel这个包文件，所以想到 rvm是ruby环境管理器，所以就试着用下面的命令安装了ruby-devel这个ruby开发包\n\n```\nrvm install ruby-devel\n```\n\n然后\n\n```\n[sudo] gem install gollum\n```\n\n<font color='red'>成功</font>\n\n默认gollum启动的接口为4567\n\nhttp://127.0.0.1:4567 就可以新建一个wiki页面进行编辑了\n\n","slug":"gitlab_wiki操作","published":1,"date":"2020-01-02T09:16:18.822Z","updated":"2020-01-02T09:16:18.822Z","title":"gitlab_wiki操作","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4y00s8y00006ds6ae3kfru6","content":"<p>####gollum安装</p>\n<p>gollum是一个文档管理服务,依赖与Ruby，一般mac上会自带有Ruby</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] gem install gollum</span><br></pre></td></tr></table></figure>\n\n<p>但是通过gem安装gollum的时候报错了,类似于下面这个错误（我当时的错误没有截图），<font color=\"red\">一般来说如果安装在源码.h文件报错一般会是开发包的问题。</font>这里其实就是少了<code>ruby-devel</code>包,所以接下来要安装ruby-devel包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR:  Error installing bluecloth:</span><br><span class=\"line\">ERROR: Failed to build gem native extension.</span><br><span class=\"line\"> </span><br><span class=\"line\">/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby</span><br><span class=\"line\">extconf.rb</span><br><span class=\"line\">mkmf.rb can't find header files for ruby at</span><br><span class=\"line\">/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/ruby.h</span><br></pre></td></tr></table></figure>\n\n<p>在linux上一般通过yum去管理包，ruby-devel 在百度上查到很多可以根据rpm去安装的，但是在mac上只有brew ，并且brew下还没有ruby-devel这个包文件，所以想到 rvm是ruby环境管理器，所以就试着用下面的命令安装了ruby-devel这个ruby开发包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install ruby-devel</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] gem install gollum</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\">成功</font></p>\n<p>默认gollum启动的接口为4567</p>\n<p><a href=\"http://127.0.0.1:4567\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:4567</a> 就可以新建一个wiki页面进行编辑了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>####gollum安装</p>\n<p>gollum是一个文档管理服务,依赖与Ruby，一般mac上会自带有Ruby</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] gem install gollum</span><br></pre></td></tr></table></figure>\n\n<p>但是通过gem安装gollum的时候报错了,类似于下面这个错误（我当时的错误没有截图），<font color=\"red\">一般来说如果安装在源码.h文件报错一般会是开发包的问题。</font>这里其实就是少了<code>ruby-devel</code>包,所以接下来要安装ruby-devel包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR:  Error installing bluecloth:</span><br><span class=\"line\">ERROR: Failed to build gem native extension.</span><br><span class=\"line\"> </span><br><span class=\"line\">/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby</span><br><span class=\"line\">extconf.rb</span><br><span class=\"line\">mkmf.rb can't find header files for ruby at</span><br><span class=\"line\">/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/ruby.h</span><br></pre></td></tr></table></figure>\n\n<p>在linux上一般通过yum去管理包，ruby-devel 在百度上查到很多可以根据rpm去安装的，但是在mac上只有brew ，并且brew下还没有ruby-devel这个包文件，所以想到 rvm是ruby环境管理器，所以就试着用下面的命令安装了ruby-devel这个ruby开发包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install ruby-devel</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[sudo] gem install gollum</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\">成功</font></p>\n<p>默认gollum启动的接口为4567</p>\n<p><a href=\"http://127.0.0.1:4567\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:4567</a> 就可以新建一个wiki页面进行编辑了</p>\n"},{"_content":"","source":"_posts/css小知识.md","raw":"---\ncategories: 前端\n---","slug":"css小知识","published":1,"date":"2020-01-02T09:17:45.230Z","updated":"2020-01-02T09:17:45.230Z","title":"css小知识","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4y00s9500016ds6b7bx90f5","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"\n# uname -a # 查看内核/操作系统/CPU信息\n\n# head -n 1 /etc/issue # 查看操作系统版本\n# cat /proc/cpuinfo # 查看CPU信息\n# hostname # 查看计算机名\n# lspci -tv # 列出所有PCI设备\n# lsusb -tv # 列出所有USB设备\n# lsmod # 列出加载的内核模块\n# env # 查看环境变量资源\n# free -m # 查看内存使用量和交换区使用量\n# df -h # 查看各分区使用情况\n# du -sh <目录名> # 查看指定目录的大小\n# grep MemTotal /proc/meminfo # 查看内存总量\n# grep MemFree /proc/meminfo # 查看空闲内存量\n# uptime # 查看系统运行时间、用户数、负载\n# cat /proc/loadavg # 查看系统负载磁盘和分区\n# mount | column -t # 查看挂接的分区状态\n# fdisk -l # 查看所有分区\n# swapon -s # 查看所有交换分区\n# hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)\n# dmesg | grep IDE # 查看启动时IDE设备检测状况网络\n# ifconfig # 查看所有网络接口的属性\n# iptables -L # 查看防火墙设置\n# route -n # 查看路由表\n# netstat -lntp # 查看所有监听端口\n# netstat -antp # 查看所有已经建立的连接\n# netstat -s # 查看网络统计信息进程\n# ps -ef # 查看所有进程\n# top # 实时显示进程状态用户\n# w # 查看活动用户\n# id <用户名> # 查看指定用户信息\n# last # 查看用户登录日志\n# cut -d- -f1 /etc/passwd # 查看系统所有用户\n# cut -d- -f1 /etc/group # 查看系统所有组\n# crontab -l # 查看当前用户的计划任务服务\n# chkconfig –list # 列出所有系统服务\n# chkconfig –list | grep on # 列出所有启动的系统服务程序\n# rpm -qa # 查看所有安装的软件包","source":"_posts/linux查看系统信息命令.md","raw":"---\ncategories: 随笔\n---\n\n# uname -a # 查看内核/操作系统/CPU信息\n\n# head -n 1 /etc/issue # 查看操作系统版本\n# cat /proc/cpuinfo # 查看CPU信息\n# hostname # 查看计算机名\n# lspci -tv # 列出所有PCI设备\n# lsusb -tv # 列出所有USB设备\n# lsmod # 列出加载的内核模块\n# env # 查看环境变量资源\n# free -m # 查看内存使用量和交换区使用量\n# df -h # 查看各分区使用情况\n# du -sh <目录名> # 查看指定目录的大小\n# grep MemTotal /proc/meminfo # 查看内存总量\n# grep MemFree /proc/meminfo # 查看空闲内存量\n# uptime # 查看系统运行时间、用户数、负载\n# cat /proc/loadavg # 查看系统负载磁盘和分区\n# mount | column -t # 查看挂接的分区状态\n# fdisk -l # 查看所有分区\n# swapon -s # 查看所有交换分区\n# hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)\n# dmesg | grep IDE # 查看启动时IDE设备检测状况网络\n# ifconfig # 查看所有网络接口的属性\n# iptables -L # 查看防火墙设置\n# route -n # 查看路由表\n# netstat -lntp # 查看所有监听端口\n# netstat -antp # 查看所有已经建立的连接\n# netstat -s # 查看网络统计信息进程\n# ps -ef # 查看所有进程\n# top # 实时显示进程状态用户\n# w # 查看活动用户\n# id <用户名> # 查看指定用户信息\n# last # 查看用户登录日志\n# cut -d- -f1 /etc/passwd # 查看系统所有用户\n# cut -d- -f1 /etc/group # 查看系统所有组\n# crontab -l # 查看当前用户的计划任务服务\n# chkconfig –list # 列出所有系统服务\n# chkconfig –list | grep on # 列出所有启动的系统服务程序\n# rpm -qa # 查看所有安装的软件包","slug":"linux查看系统信息命令","published":1,"date":"2020-01-02T09:16:18.812Z","updated":"2020-01-02T09:16:18.812Z","title":"linux查看系统信息命令","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4y00s9800036ds6endn50ie","content":"<h1 id=\"uname-a-查看内核-操作系统-CPU信息\"><a href=\"#uname-a-查看内核-操作系统-CPU信息\" class=\"headerlink\" title=\"uname -a # 查看内核/操作系统/CPU信息\"></a>uname -a # 查看内核/操作系统/CPU信息</h1><h1 id=\"head-n-1-etc-issue-查看操作系统版本\"><a href=\"#head-n-1-etc-issue-查看操作系统版本\" class=\"headerlink\" title=\"head -n 1 /etc/issue # 查看操作系统版本\"></a>head -n 1 /etc/issue # 查看操作系统版本</h1><h1 id=\"cat-proc-cpuinfo-查看CPU信息\"><a href=\"#cat-proc-cpuinfo-查看CPU信息\" class=\"headerlink\" title=\"cat /proc/cpuinfo # 查看CPU信息\"></a>cat /proc/cpuinfo # 查看CPU信息</h1><h1 id=\"hostname-查看计算机名\"><a href=\"#hostname-查看计算机名\" class=\"headerlink\" title=\"hostname # 查看计算机名\"></a>hostname # 查看计算机名</h1><h1 id=\"lspci-tv-列出所有PCI设备\"><a href=\"#lspci-tv-列出所有PCI设备\" class=\"headerlink\" title=\"lspci -tv # 列出所有PCI设备\"></a>lspci -tv # 列出所有PCI设备</h1><h1 id=\"lsusb-tv-列出所有USB设备\"><a href=\"#lsusb-tv-列出所有USB设备\" class=\"headerlink\" title=\"lsusb -tv # 列出所有USB设备\"></a>lsusb -tv # 列出所有USB设备</h1><h1 id=\"lsmod-列出加载的内核模块\"><a href=\"#lsmod-列出加载的内核模块\" class=\"headerlink\" title=\"lsmod # 列出加载的内核模块\"></a>lsmod # 列出加载的内核模块</h1><h1 id=\"env-查看环境变量资源\"><a href=\"#env-查看环境变量资源\" class=\"headerlink\" title=\"env # 查看环境变量资源\"></a>env # 查看环境变量资源</h1><h1 id=\"free-m-查看内存使用量和交换区使用量\"><a href=\"#free-m-查看内存使用量和交换区使用量\" class=\"headerlink\" title=\"free -m # 查看内存使用量和交换区使用量\"></a>free -m # 查看内存使用量和交换区使用量</h1><h1 id=\"df-h-查看各分区使用情况\"><a href=\"#df-h-查看各分区使用情况\" class=\"headerlink\" title=\"df -h # 查看各分区使用情况\"></a>df -h # 查看各分区使用情况</h1><h1 id=\"du-sh-lt-目录名-gt-查看指定目录的大小\"><a href=\"#du-sh-lt-目录名-gt-查看指定目录的大小\" class=\"headerlink\" title=\"du -sh &lt;目录名&gt; # 查看指定目录的大小\"></a>du -sh &lt;目录名&gt; # 查看指定目录的大小</h1><h1 id=\"grep-MemTotal-proc-meminfo-查看内存总量\"><a href=\"#grep-MemTotal-proc-meminfo-查看内存总量\" class=\"headerlink\" title=\"grep MemTotal /proc/meminfo # 查看内存总量\"></a>grep MemTotal /proc/meminfo # 查看内存总量</h1><h1 id=\"grep-MemFree-proc-meminfo-查看空闲内存量\"><a href=\"#grep-MemFree-proc-meminfo-查看空闲内存量\" class=\"headerlink\" title=\"grep MemFree /proc/meminfo # 查看空闲内存量\"></a>grep MemFree /proc/meminfo # 查看空闲内存量</h1><h1 id=\"uptime-查看系统运行时间、用户数、负载\"><a href=\"#uptime-查看系统运行时间、用户数、负载\" class=\"headerlink\" title=\"uptime # 查看系统运行时间、用户数、负载\"></a>uptime # 查看系统运行时间、用户数、负载</h1><h1 id=\"cat-proc-loadavg-查看系统负载磁盘和分区\"><a href=\"#cat-proc-loadavg-查看系统负载磁盘和分区\" class=\"headerlink\" title=\"cat /proc/loadavg # 查看系统负载磁盘和分区\"></a>cat /proc/loadavg # 查看系统负载磁盘和分区</h1><h1 id=\"mount-column-t-查看挂接的分区状态\"><a href=\"#mount-column-t-查看挂接的分区状态\" class=\"headerlink\" title=\"mount | column -t # 查看挂接的分区状态\"></a>mount | column -t # 查看挂接的分区状态</h1><h1 id=\"fdisk-l-查看所有分区\"><a href=\"#fdisk-l-查看所有分区\" class=\"headerlink\" title=\"fdisk -l # 查看所有分区\"></a>fdisk -l # 查看所有分区</h1><h1 id=\"swapon-s-查看所有交换分区\"><a href=\"#swapon-s-查看所有交换分区\" class=\"headerlink\" title=\"swapon -s # 查看所有交换分区\"></a>swapon -s # 查看所有交换分区</h1><h1 id=\"hdparm-i-dev-hda-查看磁盘参数-仅适用于IDE设备\"><a href=\"#hdparm-i-dev-hda-查看磁盘参数-仅适用于IDE设备\" class=\"headerlink\" title=\"hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)\"></a>hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)</h1><h1 id=\"dmesg-grep-IDE-查看启动时IDE设备检测状况网络\"><a href=\"#dmesg-grep-IDE-查看启动时IDE设备检测状况网络\" class=\"headerlink\" title=\"dmesg | grep IDE # 查看启动时IDE设备检测状况网络\"></a>dmesg | grep IDE # 查看启动时IDE设备检测状况网络</h1><h1 id=\"ifconfig-查看所有网络接口的属性\"><a href=\"#ifconfig-查看所有网络接口的属性\" class=\"headerlink\" title=\"ifconfig # 查看所有网络接口的属性\"></a>ifconfig # 查看所有网络接口的属性</h1><h1 id=\"iptables-L-查看防火墙设置\"><a href=\"#iptables-L-查看防火墙设置\" class=\"headerlink\" title=\"iptables -L # 查看防火墙设置\"></a>iptables -L # 查看防火墙设置</h1><h1 id=\"route-n-查看路由表\"><a href=\"#route-n-查看路由表\" class=\"headerlink\" title=\"route -n # 查看路由表\"></a>route -n # 查看路由表</h1><h1 id=\"netstat-lntp-查看所有监听端口\"><a href=\"#netstat-lntp-查看所有监听端口\" class=\"headerlink\" title=\"netstat -lntp # 查看所有监听端口\"></a>netstat -lntp # 查看所有监听端口</h1><h1 id=\"netstat-antp-查看所有已经建立的连接\"><a href=\"#netstat-antp-查看所有已经建立的连接\" class=\"headerlink\" title=\"netstat -antp # 查看所有已经建立的连接\"></a>netstat -antp # 查看所有已经建立的连接</h1><h1 id=\"netstat-s-查看网络统计信息进程\"><a href=\"#netstat-s-查看网络统计信息进程\" class=\"headerlink\" title=\"netstat -s # 查看网络统计信息进程\"></a>netstat -s # 查看网络统计信息进程</h1><h1 id=\"ps-ef-查看所有进程\"><a href=\"#ps-ef-查看所有进程\" class=\"headerlink\" title=\"ps -ef # 查看所有进程\"></a>ps -ef # 查看所有进程</h1><h1 id=\"top-实时显示进程状态用户\"><a href=\"#top-实时显示进程状态用户\" class=\"headerlink\" title=\"top # 实时显示进程状态用户\"></a>top # 实时显示进程状态用户</h1><h1 id=\"w-查看活动用户\"><a href=\"#w-查看活动用户\" class=\"headerlink\" title=\"w # 查看活动用户\"></a>w # 查看活动用户</h1><h1 id=\"id-lt-用户名-gt-查看指定用户信息\"><a href=\"#id-lt-用户名-gt-查看指定用户信息\" class=\"headerlink\" title=\"id &lt;用户名&gt; # 查看指定用户信息\"></a>id &lt;用户名&gt; # 查看指定用户信息</h1><h1 id=\"last-查看用户登录日志\"><a href=\"#last-查看用户登录日志\" class=\"headerlink\" title=\"last # 查看用户登录日志\"></a>last # 查看用户登录日志</h1><h1 id=\"cut-d-f1-etc-passwd-查看系统所有用户\"><a href=\"#cut-d-f1-etc-passwd-查看系统所有用户\" class=\"headerlink\" title=\"cut -d- -f1 /etc/passwd # 查看系统所有用户\"></a>cut -d- -f1 /etc/passwd # 查看系统所有用户</h1><h1 id=\"cut-d-f1-etc-group-查看系统所有组\"><a href=\"#cut-d-f1-etc-group-查看系统所有组\" class=\"headerlink\" title=\"cut -d- -f1 /etc/group # 查看系统所有组\"></a>cut -d- -f1 /etc/group # 查看系统所有组</h1><h1 id=\"crontab-l-查看当前用户的计划任务服务\"><a href=\"#crontab-l-查看当前用户的计划任务服务\" class=\"headerlink\" title=\"crontab -l # 查看当前用户的计划任务服务\"></a>crontab -l # 查看当前用户的计划任务服务</h1><h1 id=\"chkconfig-–list-列出所有系统服务\"><a href=\"#chkconfig-–list-列出所有系统服务\" class=\"headerlink\" title=\"chkconfig –list # 列出所有系统服务\"></a>chkconfig –list # 列出所有系统服务</h1><h1 id=\"chkconfig-–list-grep-on-列出所有启动的系统服务程序\"><a href=\"#chkconfig-–list-grep-on-列出所有启动的系统服务程序\" class=\"headerlink\" title=\"chkconfig –list | grep on # 列出所有启动的系统服务程序\"></a>chkconfig –list | grep on # 列出所有启动的系统服务程序</h1><h1 id=\"rpm-qa-查看所有安装的软件包\"><a href=\"#rpm-qa-查看所有安装的软件包\" class=\"headerlink\" title=\"rpm -qa # 查看所有安装的软件包\"></a>rpm -qa # 查看所有安装的软件包</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"uname-a-查看内核-操作系统-CPU信息\"><a href=\"#uname-a-查看内核-操作系统-CPU信息\" class=\"headerlink\" title=\"uname -a # 查看内核/操作系统/CPU信息\"></a>uname -a # 查看内核/操作系统/CPU信息</h1><h1 id=\"head-n-1-etc-issue-查看操作系统版本\"><a href=\"#head-n-1-etc-issue-查看操作系统版本\" class=\"headerlink\" title=\"head -n 1 /etc/issue # 查看操作系统版本\"></a>head -n 1 /etc/issue # 查看操作系统版本</h1><h1 id=\"cat-proc-cpuinfo-查看CPU信息\"><a href=\"#cat-proc-cpuinfo-查看CPU信息\" class=\"headerlink\" title=\"cat /proc/cpuinfo # 查看CPU信息\"></a>cat /proc/cpuinfo # 查看CPU信息</h1><h1 id=\"hostname-查看计算机名\"><a href=\"#hostname-查看计算机名\" class=\"headerlink\" title=\"hostname # 查看计算机名\"></a>hostname # 查看计算机名</h1><h1 id=\"lspci-tv-列出所有PCI设备\"><a href=\"#lspci-tv-列出所有PCI设备\" class=\"headerlink\" title=\"lspci -tv # 列出所有PCI设备\"></a>lspci -tv # 列出所有PCI设备</h1><h1 id=\"lsusb-tv-列出所有USB设备\"><a href=\"#lsusb-tv-列出所有USB设备\" class=\"headerlink\" title=\"lsusb -tv # 列出所有USB设备\"></a>lsusb -tv # 列出所有USB设备</h1><h1 id=\"lsmod-列出加载的内核模块\"><a href=\"#lsmod-列出加载的内核模块\" class=\"headerlink\" title=\"lsmod # 列出加载的内核模块\"></a>lsmod # 列出加载的内核模块</h1><h1 id=\"env-查看环境变量资源\"><a href=\"#env-查看环境变量资源\" class=\"headerlink\" title=\"env # 查看环境变量资源\"></a>env # 查看环境变量资源</h1><h1 id=\"free-m-查看内存使用量和交换区使用量\"><a href=\"#free-m-查看内存使用量和交换区使用量\" class=\"headerlink\" title=\"free -m # 查看内存使用量和交换区使用量\"></a>free -m # 查看内存使用量和交换区使用量</h1><h1 id=\"df-h-查看各分区使用情况\"><a href=\"#df-h-查看各分区使用情况\" class=\"headerlink\" title=\"df -h # 查看各分区使用情况\"></a>df -h # 查看各分区使用情况</h1><h1 id=\"du-sh-lt-目录名-gt-查看指定目录的大小\"><a href=\"#du-sh-lt-目录名-gt-查看指定目录的大小\" class=\"headerlink\" title=\"du -sh &lt;目录名&gt; # 查看指定目录的大小\"></a>du -sh &lt;目录名&gt; # 查看指定目录的大小</h1><h1 id=\"grep-MemTotal-proc-meminfo-查看内存总量\"><a href=\"#grep-MemTotal-proc-meminfo-查看内存总量\" class=\"headerlink\" title=\"grep MemTotal /proc/meminfo # 查看内存总量\"></a>grep MemTotal /proc/meminfo # 查看内存总量</h1><h1 id=\"grep-MemFree-proc-meminfo-查看空闲内存量\"><a href=\"#grep-MemFree-proc-meminfo-查看空闲内存量\" class=\"headerlink\" title=\"grep MemFree /proc/meminfo # 查看空闲内存量\"></a>grep MemFree /proc/meminfo # 查看空闲内存量</h1><h1 id=\"uptime-查看系统运行时间、用户数、负载\"><a href=\"#uptime-查看系统运行时间、用户数、负载\" class=\"headerlink\" title=\"uptime # 查看系统运行时间、用户数、负载\"></a>uptime # 查看系统运行时间、用户数、负载</h1><h1 id=\"cat-proc-loadavg-查看系统负载磁盘和分区\"><a href=\"#cat-proc-loadavg-查看系统负载磁盘和分区\" class=\"headerlink\" title=\"cat /proc/loadavg # 查看系统负载磁盘和分区\"></a>cat /proc/loadavg # 查看系统负载磁盘和分区</h1><h1 id=\"mount-column-t-查看挂接的分区状态\"><a href=\"#mount-column-t-查看挂接的分区状态\" class=\"headerlink\" title=\"mount | column -t # 查看挂接的分区状态\"></a>mount | column -t # 查看挂接的分区状态</h1><h1 id=\"fdisk-l-查看所有分区\"><a href=\"#fdisk-l-查看所有分区\" class=\"headerlink\" title=\"fdisk -l # 查看所有分区\"></a>fdisk -l # 查看所有分区</h1><h1 id=\"swapon-s-查看所有交换分区\"><a href=\"#swapon-s-查看所有交换分区\" class=\"headerlink\" title=\"swapon -s # 查看所有交换分区\"></a>swapon -s # 查看所有交换分区</h1><h1 id=\"hdparm-i-dev-hda-查看磁盘参数-仅适用于IDE设备\"><a href=\"#hdparm-i-dev-hda-查看磁盘参数-仅适用于IDE设备\" class=\"headerlink\" title=\"hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)\"></a>hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)</h1><h1 id=\"dmesg-grep-IDE-查看启动时IDE设备检测状况网络\"><a href=\"#dmesg-grep-IDE-查看启动时IDE设备检测状况网络\" class=\"headerlink\" title=\"dmesg | grep IDE # 查看启动时IDE设备检测状况网络\"></a>dmesg | grep IDE # 查看启动时IDE设备检测状况网络</h1><h1 id=\"ifconfig-查看所有网络接口的属性\"><a href=\"#ifconfig-查看所有网络接口的属性\" class=\"headerlink\" title=\"ifconfig # 查看所有网络接口的属性\"></a>ifconfig # 查看所有网络接口的属性</h1><h1 id=\"iptables-L-查看防火墙设置\"><a href=\"#iptables-L-查看防火墙设置\" class=\"headerlink\" title=\"iptables -L # 查看防火墙设置\"></a>iptables -L # 查看防火墙设置</h1><h1 id=\"route-n-查看路由表\"><a href=\"#route-n-查看路由表\" class=\"headerlink\" title=\"route -n # 查看路由表\"></a>route -n # 查看路由表</h1><h1 id=\"netstat-lntp-查看所有监听端口\"><a href=\"#netstat-lntp-查看所有监听端口\" class=\"headerlink\" title=\"netstat -lntp # 查看所有监听端口\"></a>netstat -lntp # 查看所有监听端口</h1><h1 id=\"netstat-antp-查看所有已经建立的连接\"><a href=\"#netstat-antp-查看所有已经建立的连接\" class=\"headerlink\" title=\"netstat -antp # 查看所有已经建立的连接\"></a>netstat -antp # 查看所有已经建立的连接</h1><h1 id=\"netstat-s-查看网络统计信息进程\"><a href=\"#netstat-s-查看网络统计信息进程\" class=\"headerlink\" title=\"netstat -s # 查看网络统计信息进程\"></a>netstat -s # 查看网络统计信息进程</h1><h1 id=\"ps-ef-查看所有进程\"><a href=\"#ps-ef-查看所有进程\" class=\"headerlink\" title=\"ps -ef # 查看所有进程\"></a>ps -ef # 查看所有进程</h1><h1 id=\"top-实时显示进程状态用户\"><a href=\"#top-实时显示进程状态用户\" class=\"headerlink\" title=\"top # 实时显示进程状态用户\"></a>top # 实时显示进程状态用户</h1><h1 id=\"w-查看活动用户\"><a href=\"#w-查看活动用户\" class=\"headerlink\" title=\"w # 查看活动用户\"></a>w # 查看活动用户</h1><h1 id=\"id-lt-用户名-gt-查看指定用户信息\"><a href=\"#id-lt-用户名-gt-查看指定用户信息\" class=\"headerlink\" title=\"id &lt;用户名&gt; # 查看指定用户信息\"></a>id &lt;用户名&gt; # 查看指定用户信息</h1><h1 id=\"last-查看用户登录日志\"><a href=\"#last-查看用户登录日志\" class=\"headerlink\" title=\"last # 查看用户登录日志\"></a>last # 查看用户登录日志</h1><h1 id=\"cut-d-f1-etc-passwd-查看系统所有用户\"><a href=\"#cut-d-f1-etc-passwd-查看系统所有用户\" class=\"headerlink\" title=\"cut -d- -f1 /etc/passwd # 查看系统所有用户\"></a>cut -d- -f1 /etc/passwd # 查看系统所有用户</h1><h1 id=\"cut-d-f1-etc-group-查看系统所有组\"><a href=\"#cut-d-f1-etc-group-查看系统所有组\" class=\"headerlink\" title=\"cut -d- -f1 /etc/group # 查看系统所有组\"></a>cut -d- -f1 /etc/group # 查看系统所有组</h1><h1 id=\"crontab-l-查看当前用户的计划任务服务\"><a href=\"#crontab-l-查看当前用户的计划任务服务\" class=\"headerlink\" title=\"crontab -l # 查看当前用户的计划任务服务\"></a>crontab -l # 查看当前用户的计划任务服务</h1><h1 id=\"chkconfig-–list-列出所有系统服务\"><a href=\"#chkconfig-–list-列出所有系统服务\" class=\"headerlink\" title=\"chkconfig –list # 列出所有系统服务\"></a>chkconfig –list # 列出所有系统服务</h1><h1 id=\"chkconfig-–list-grep-on-列出所有启动的系统服务程序\"><a href=\"#chkconfig-–list-grep-on-列出所有启动的系统服务程序\" class=\"headerlink\" title=\"chkconfig –list | grep on # 列出所有启动的系统服务程序\"></a>chkconfig –list | grep on # 列出所有启动的系统服务程序</h1><h1 id=\"rpm-qa-查看所有安装的软件包\"><a href=\"#rpm-qa-查看所有安装的软件包\" class=\"headerlink\" title=\"rpm -qa # 查看所有安装的软件包\"></a>rpm -qa # 查看所有安装的软件包</h1>"},{"_content":"1.sudo pip install  时， sudo: pip：找不到命令\n\n```\n解决方法：\n1.修改文件 /etc/sudoers\n   sudo vi /etc/sudoers\n   修改  Defaults  env_reset  这一行内容 为   Defaults   !env_reset\n\n2.修改文件 .bashrc\n\tsudo vi .bashrc\n\t在文件末尾添加  alias sudo='sudo env PATH=$PATH'\n\t\n\tsource .bashrc\n[附录sudo的作用的文章 https://www.ibm.com/developerworks/cn/aix/library/au-sudo/index.html]\n```\n\n2.centos7 使用yum进行install 出现 KeyboardInterrupt\n\n错误信息 \n\nFile\"/usr/lib/python2.7/site-packages/urlgrabber/grabber.py\",line1517,in_do_perform \nraiseKeyboardInterrupt\n\n```\n解决方法：\n1.打开文件 /usr/lib/python2.7/site-packages/urlgrabber/grabber.py \n2.在1510行 (通过::1510 可以定位到)找到代码  elif errcode in (42,55,56): \n3.修改上面代码为 elif errcode == 42:\n4.保存退出即可\n```\n\n\n\n ","source":"_posts/linux问题.md","raw":"---\ncategories: 随笔\n---\n1.sudo pip install  时， sudo: pip：找不到命令\n\n```\n解决方法：\n1.修改文件 /etc/sudoers\n   sudo vi /etc/sudoers\n   修改  Defaults  env_reset  这一行内容 为   Defaults   !env_reset\n\n2.修改文件 .bashrc\n\tsudo vi .bashrc\n\t在文件末尾添加  alias sudo='sudo env PATH=$PATH'\n\t\n\tsource .bashrc\n[附录sudo的作用的文章 https://www.ibm.com/developerworks/cn/aix/library/au-sudo/index.html]\n```\n\n2.centos7 使用yum进行install 出现 KeyboardInterrupt\n\n错误信息 \n\nFile\"/usr/lib/python2.7/site-packages/urlgrabber/grabber.py\",line1517,in_do_perform \nraiseKeyboardInterrupt\n\n```\n解决方法：\n1.打开文件 /usr/lib/python2.7/site-packages/urlgrabber/grabber.py \n2.在1510行 (通过::1510 可以定位到)找到代码  elif errcode in (42,55,56): \n3.修改上面代码为 elif errcode == 42:\n4.保存退出即可\n```\n\n\n\n ","slug":"linux问题","published":1,"date":"2020-01-02T09:16:18.826Z","updated":"2020-01-02T09:16:18.826Z","title":"linux问题","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4y00s9a00046ds6bdjlh117","content":"<p>1.sudo pip install  时， sudo: pip：找不到命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：</span><br><span class=\"line\">1.修改文件 &#x2F;etc&#x2F;sudoers</span><br><span class=\"line\">   sudo vi &#x2F;etc&#x2F;sudoers</span><br><span class=\"line\">   修改  Defaults  env_reset  这一行内容 为   Defaults   !env_reset</span><br><span class=\"line\"></span><br><span class=\"line\">2.修改文件 .bashrc</span><br><span class=\"line\">\tsudo vi .bashrc</span><br><span class=\"line\">\t在文件末尾添加  alias sudo&#x3D;&#39;sudo env PATH&#x3D;$PATH&#39;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsource .bashrc</span><br><span class=\"line\">[附录sudo的作用的文章 https:&#x2F;&#x2F;www.ibm.com&#x2F;developerworks&#x2F;cn&#x2F;aix&#x2F;library&#x2F;au-sudo&#x2F;index.html]</span><br></pre></td></tr></table></figure>\n\n<p>2.centos7 使用yum进行install 出现 KeyboardInterrupt</p>\n<p>错误信息 </p>\n<p>File”/usr/lib/python2.7/site-packages/urlgrabber/grabber.py”,line1517,in_do_perform<br>raiseKeyboardInterrupt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：</span><br><span class=\"line\">1.打开文件 &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;urlgrabber&#x2F;grabber.py </span><br><span class=\"line\">2.在1510行 (通过::1510 可以定位到)找到代码  elif errcode in (42,55,56): </span><br><span class=\"line\">3.修改上面代码为 elif errcode &#x3D;&#x3D; 42:</span><br><span class=\"line\">4.保存退出即可</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.sudo pip install  时， sudo: pip：找不到命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：</span><br><span class=\"line\">1.修改文件 &#x2F;etc&#x2F;sudoers</span><br><span class=\"line\">   sudo vi &#x2F;etc&#x2F;sudoers</span><br><span class=\"line\">   修改  Defaults  env_reset  这一行内容 为   Defaults   !env_reset</span><br><span class=\"line\"></span><br><span class=\"line\">2.修改文件 .bashrc</span><br><span class=\"line\">\tsudo vi .bashrc</span><br><span class=\"line\">\t在文件末尾添加  alias sudo&#x3D;&#39;sudo env PATH&#x3D;$PATH&#39;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsource .bashrc</span><br><span class=\"line\">[附录sudo的作用的文章 https:&#x2F;&#x2F;www.ibm.com&#x2F;developerworks&#x2F;cn&#x2F;aix&#x2F;library&#x2F;au-sudo&#x2F;index.html]</span><br></pre></td></tr></table></figure>\n\n<p>2.centos7 使用yum进行install 出现 KeyboardInterrupt</p>\n<p>错误信息 </p>\n<p>File”/usr/lib/python2.7/site-packages/urlgrabber/grabber.py”,line1517,in_do_perform<br>raiseKeyboardInterrupt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：</span><br><span class=\"line\">1.打开文件 &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;urlgrabber&#x2F;grabber.py </span><br><span class=\"line\">2.在1510行 (通过::1510 可以定位到)找到代码  elif errcode in (42,55,56): </span><br><span class=\"line\">3.修改上面代码为 elif errcode &#x3D;&#x3D; 42:</span><br><span class=\"line\">4.保存退出即可</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"_content":"1.正则\n\n```python\n#正则去按照正则的组去替换文本\npattern = re.compile(r'\\[(.*?)\\]/fzjg')\ntestContent = pattern.sub(r'\\1', fileContent)\n#将fileContent中所有符合pattern的文本内容替换为 pattern匹配组1的内容\n#例： [2013年7月11日，被告人乌某对被害人刘某谎称自己有工作，从被害人刘某处借款人民币50,000元。]/fzjg案发后偿还了人民币26,000元。\n#结果为：2013年7月11日，被告人乌某对被害人刘某谎称自己有工作，从被害人刘某处借款人民币50,000元。案发后偿还了人民币26,000元。\n```\n\n2.在单独的python脚本中引入另一个目录中的python脚本\n\n```python\nimport sys\nbasedir = os.path.abspath(os.path.dirname(__file__))\nbasedir = basedir.split(\"service\")[0]\nsys.path.append(basedir)  #重要的一部分  将需要引入的那个目录加到python系统路径中之后再引用\nfrom service.dataBase.db_conn import MySQLSingle\n```\n\n3.python装饰器\n\n对于给已有函数添加额外功能并且不影响已有函数很有用\n\nfunctools 中wrap的使用\n\nhttp://python.jobbole.com/82344/\n\nhttp://lib.csdn.net/article/python/62942\n\n```python\ndef deco1(func):\n    print('deco1')\n    def wrapper():\n        print('deco1 wrapper')\n        func()\n        print('deco1 wraper end')\n    return wrapper\ndef deco2(func):\n    print('deco2')\n    def wrapper():\n        print('deco2 wrapper')\n        func()\n        print('deco2 wraper end')\n    return wrapper\n\n@deco1\n@deco2\ndef aa():\n    print('aa')\n\naa()\n\n#上面 装饰器 @deco1 @deco2从下向上执行\n#先执行deco2  @deco2 就相当于执行   func2 = deco2(aa)    这时输出  deco2  返回 deco2的内函数 wrapper\n#然后执行deco1 @deco1 就相当于执行 func1 = deco1(func2) = deco1(deco2(aa))  这里的func2就是 deco2的wrapper  这是输出 deco1 wrapper 然后返回 deco1的wraper\n#最后的结果aa()就是 执行了 deco1的wraper函数\n```\n\n```shell\n输出\ndeco2\ndeco1\ndeco1 wrapper\ndeco2 wrapper\naa\ndeco2 wraper end\ndeco1 wraper end\n```\n\n4.python 访问数据库单例模式\n\n```\n# -*- coding: utf-8 -*-\n# @Time    : 2018/10/9 17:27\n# @Author  : xjzhang\n# @Site    : \n# @File    : db_conn.py\n# @Desc    :\n# @Software: PyCharm\nimport pymysql\nfrom functools import wraps\n\n\ndef singleton(cls):\n    instances = {}\n\n    @wraps(cls)\n    def get_instance(*args, **kw):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kw)\n        return instances[cls]\n    return get_instance\n\n\n# 数据库连接实例\n@singleton\nclass MySQLSingle(object):\n    def __init__(self, conn=''):\n        self.conn = conn\n\n    def get_conn(self,host_mysql, port_mysql, user_name_mysql, password_mysql, database):\n        try:\n            self.conn = pymysql.connect(host=host_mysql, port=port_mysql, user=user_name_mysql, password=password_mysql, database=database,\n                                        charset='utf8')\n        except Exception as e:\n            print('File to connect database: %s' % e)\n        return self.conn\n```\n\n```\nfrom service.dataBase.db_conn import MySQLSingle\n\ndef get_train_data(train_path):\n    mysql_single = MySQLSingle()\n    conn = mysql_single.get_conn('10.1.245.214',31306,'lsop','lsop','lsop')\n    with conn.cursor() as cursor:\n        sql = \"select id,case_theme from lsop_law_by_case\"\n        cursor.execute(sql)\n        all = cursor.fetchall()\n        with open(train_path,'w') as trainFile:\n            trainFile.write('id\\ttheme\\n')\n            for id,theme in all:\n                trainFile.write(id+'\\t'+theme+'\\n')\n    conn.close()\n```\n\n5.爬虫-反爬策略\n\n![爬虫策略](/Users/zhangxuejing/Documents/文档/爬虫策略.png)\n\n6.python中 __repr__函数\n\n\t如果复写对象的这个函数 可以修改对象的输出信息\n\n\n\n7. 安装好python后，然后使用pip install python包的时候经常会遇到一些ssl问题\n\n   Could not fetch URL https://pypi.org/simple/jieba/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/jieba/ (Caused by SSLError(SSLError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:847)'),)) - skipping\n\n   ```shell\n   解决： 因为这个 https://pypi.org这个pip源在国内不能用需要更换pip源\n   修改源方法\n   mkdir ~/.pip \n   vim ~/.pip/pip.conf\n   [global]\n   index-url = http://mirrors.aliyun.com/pypi/simple/\n   [install]\n   trusted-host = mirrors.aliyun.com\n   ```\n\n   ```\n   pip国内镜像源。\n   \n   阿里云 http://mirrors.aliyun.com/pypi/simple/\n   中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/\n   豆瓣 http://pypi.douban.com/simple\n   Python官方 https://pypi.python.org/simple/  \n   v2ex http://pypi.v2ex.com/simple/\n   中国科学院 http://pypi.mirrors.opencas.cn/simple/\n   清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/\n   ```\n\n   8.在centos中不能正常显示中文，所有中文都是乱码\n\n   ```shell\n   解决：\n   通过locale查看 本地字符集设置\n   正常为下面的列表时可以显示utf-8编码的中文字符，但是现在都是zh_en.UTF-8\n   LANG=zh_CN.UTF-8\n   LC_CTYPE=\"zh_CN.UTF-8\"\n   LC_NUMERIC=\"zh_CN.UTF-8\"\n   LC_TIME=\"zh_CN.UTF-8\"\n   LC_COLLATE=\"zh_CN.UTF-8\"\n   LC_MONETARY=\"zh_CN.UTF-8\"\n   LC_MESSAGES=\"zh_CN.UTF-8\"\n   LC_PAPER=\"zh_CN.UTF-8\"\n   LC_NAME=\"zh_CN.UTF-8\"\n   LC_ADDRESS=\"zh_CN.UTF-8\"\n   LC_TELEPHONE=\"zh_CN.UTF-8\"\n   LC_MEASUREMENT=\"zh_CN.UTF-8\"\n   LC_IDENTIFICATION=\"zh_CN.UTF-8\"\n   LC_ALL=zh_CN.UTF-8\n   \n   此时可以修改locale\n   通过 locale -a | grep zh  查看是否有 zh_CN.UTF-8的字符集\n   如果有 在.bashrc中添加 export LC_ALL=zh_CN.UTF-8  然后 source .bashrc即可\n   如果没有，可以在其他正常的centos系统中 /usr/lib/locale/目录下拷贝locale-archive 覆盖 当前机器系统的 /usr/lib/locale/ 的locale-archive 然后重复上面操作\n   ```\n\n","source":"_posts/python语法.md","raw":"---\ncategories: 随笔\n---\n1.正则\n\n```python\n#正则去按照正则的组去替换文本\npattern = re.compile(r'\\[(.*?)\\]/fzjg')\ntestContent = pattern.sub(r'\\1', fileContent)\n#将fileContent中所有符合pattern的文本内容替换为 pattern匹配组1的内容\n#例： [2013年7月11日，被告人乌某对被害人刘某谎称自己有工作，从被害人刘某处借款人民币50,000元。]/fzjg案发后偿还了人民币26,000元。\n#结果为：2013年7月11日，被告人乌某对被害人刘某谎称自己有工作，从被害人刘某处借款人民币50,000元。案发后偿还了人民币26,000元。\n```\n\n2.在单独的python脚本中引入另一个目录中的python脚本\n\n```python\nimport sys\nbasedir = os.path.abspath(os.path.dirname(__file__))\nbasedir = basedir.split(\"service\")[0]\nsys.path.append(basedir)  #重要的一部分  将需要引入的那个目录加到python系统路径中之后再引用\nfrom service.dataBase.db_conn import MySQLSingle\n```\n\n3.python装饰器\n\n对于给已有函数添加额外功能并且不影响已有函数很有用\n\nfunctools 中wrap的使用\n\nhttp://python.jobbole.com/82344/\n\nhttp://lib.csdn.net/article/python/62942\n\n```python\ndef deco1(func):\n    print('deco1')\n    def wrapper():\n        print('deco1 wrapper')\n        func()\n        print('deco1 wraper end')\n    return wrapper\ndef deco2(func):\n    print('deco2')\n    def wrapper():\n        print('deco2 wrapper')\n        func()\n        print('deco2 wraper end')\n    return wrapper\n\n@deco1\n@deco2\ndef aa():\n    print('aa')\n\naa()\n\n#上面 装饰器 @deco1 @deco2从下向上执行\n#先执行deco2  @deco2 就相当于执行   func2 = deco2(aa)    这时输出  deco2  返回 deco2的内函数 wrapper\n#然后执行deco1 @deco1 就相当于执行 func1 = deco1(func2) = deco1(deco2(aa))  这里的func2就是 deco2的wrapper  这是输出 deco1 wrapper 然后返回 deco1的wraper\n#最后的结果aa()就是 执行了 deco1的wraper函数\n```\n\n```shell\n输出\ndeco2\ndeco1\ndeco1 wrapper\ndeco2 wrapper\naa\ndeco2 wraper end\ndeco1 wraper end\n```\n\n4.python 访问数据库单例模式\n\n```\n# -*- coding: utf-8 -*-\n# @Time    : 2018/10/9 17:27\n# @Author  : xjzhang\n# @Site    : \n# @File    : db_conn.py\n# @Desc    :\n# @Software: PyCharm\nimport pymysql\nfrom functools import wraps\n\n\ndef singleton(cls):\n    instances = {}\n\n    @wraps(cls)\n    def get_instance(*args, **kw):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kw)\n        return instances[cls]\n    return get_instance\n\n\n# 数据库连接实例\n@singleton\nclass MySQLSingle(object):\n    def __init__(self, conn=''):\n        self.conn = conn\n\n    def get_conn(self,host_mysql, port_mysql, user_name_mysql, password_mysql, database):\n        try:\n            self.conn = pymysql.connect(host=host_mysql, port=port_mysql, user=user_name_mysql, password=password_mysql, database=database,\n                                        charset='utf8')\n        except Exception as e:\n            print('File to connect database: %s' % e)\n        return self.conn\n```\n\n```\nfrom service.dataBase.db_conn import MySQLSingle\n\ndef get_train_data(train_path):\n    mysql_single = MySQLSingle()\n    conn = mysql_single.get_conn('10.1.245.214',31306,'lsop','lsop','lsop')\n    with conn.cursor() as cursor:\n        sql = \"select id,case_theme from lsop_law_by_case\"\n        cursor.execute(sql)\n        all = cursor.fetchall()\n        with open(train_path,'w') as trainFile:\n            trainFile.write('id\\ttheme\\n')\n            for id,theme in all:\n                trainFile.write(id+'\\t'+theme+'\\n')\n    conn.close()\n```\n\n5.爬虫-反爬策略\n\n![爬虫策略](/Users/zhangxuejing/Documents/文档/爬虫策略.png)\n\n6.python中 __repr__函数\n\n\t如果复写对象的这个函数 可以修改对象的输出信息\n\n\n\n7. 安装好python后，然后使用pip install python包的时候经常会遇到一些ssl问题\n\n   Could not fetch URL https://pypi.org/simple/jieba/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/jieba/ (Caused by SSLError(SSLError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:847)'),)) - skipping\n\n   ```shell\n   解决： 因为这个 https://pypi.org这个pip源在国内不能用需要更换pip源\n   修改源方法\n   mkdir ~/.pip \n   vim ~/.pip/pip.conf\n   [global]\n   index-url = http://mirrors.aliyun.com/pypi/simple/\n   [install]\n   trusted-host = mirrors.aliyun.com\n   ```\n\n   ```\n   pip国内镜像源。\n   \n   阿里云 http://mirrors.aliyun.com/pypi/simple/\n   中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/\n   豆瓣 http://pypi.douban.com/simple\n   Python官方 https://pypi.python.org/simple/  \n   v2ex http://pypi.v2ex.com/simple/\n   中国科学院 http://pypi.mirrors.opencas.cn/simple/\n   清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/\n   ```\n\n   8.在centos中不能正常显示中文，所有中文都是乱码\n\n   ```shell\n   解决：\n   通过locale查看 本地字符集设置\n   正常为下面的列表时可以显示utf-8编码的中文字符，但是现在都是zh_en.UTF-8\n   LANG=zh_CN.UTF-8\n   LC_CTYPE=\"zh_CN.UTF-8\"\n   LC_NUMERIC=\"zh_CN.UTF-8\"\n   LC_TIME=\"zh_CN.UTF-8\"\n   LC_COLLATE=\"zh_CN.UTF-8\"\n   LC_MONETARY=\"zh_CN.UTF-8\"\n   LC_MESSAGES=\"zh_CN.UTF-8\"\n   LC_PAPER=\"zh_CN.UTF-8\"\n   LC_NAME=\"zh_CN.UTF-8\"\n   LC_ADDRESS=\"zh_CN.UTF-8\"\n   LC_TELEPHONE=\"zh_CN.UTF-8\"\n   LC_MEASUREMENT=\"zh_CN.UTF-8\"\n   LC_IDENTIFICATION=\"zh_CN.UTF-8\"\n   LC_ALL=zh_CN.UTF-8\n   \n   此时可以修改locale\n   通过 locale -a | grep zh  查看是否有 zh_CN.UTF-8的字符集\n   如果有 在.bashrc中添加 export LC_ALL=zh_CN.UTF-8  然后 source .bashrc即可\n   如果没有，可以在其他正常的centos系统中 /usr/lib/locale/目录下拷贝locale-archive 覆盖 当前机器系统的 /usr/lib/locale/ 的locale-archive 然后重复上面操作\n   ```\n\n","slug":"python语法","published":1,"date":"2020-01-02T09:16:18.817Z","updated":"2020-01-02T09:16:18.820Z","title":"python语法","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4y00s9b00056ds6b26zhq4u","content":"<p>1.正则</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#正则去按照正则的组去替换文本</span></span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">r'\\[(.*?)\\]/fzjg'</span>)</span><br><span class=\"line\">testContent = pattern.sub(<span class=\"string\">r'\\1'</span>, fileContent)</span><br><span class=\"line\"><span class=\"comment\">#将fileContent中所有符合pattern的文本内容替换为 pattern匹配组1的内容</span></span><br><span class=\"line\"><span class=\"comment\">#例： [2013年7月11日，被告人乌某对被害人刘某谎称自己有工作，从被害人刘某处借款人民币50,000元。]/fzjg案发后偿还了人民币26,000元。</span></span><br><span class=\"line\"><span class=\"comment\">#结果为：2013年7月11日，被告人乌某对被害人刘某谎称自己有工作，从被害人刘某处借款人民币50,000元。案发后偿还了人民币26,000元。</span></span><br></pre></td></tr></table></figure>\n\n<p>2.在单独的python脚本中引入另一个目录中的python脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\">basedir = basedir.split(<span class=\"string\">\"service\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">sys.path.append(basedir)  <span class=\"comment\">#重要的一部分  将需要引入的那个目录加到python系统路径中之后再引用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> service.dataBase.db_conn <span class=\"keyword\">import</span> MySQLSingle</span><br></pre></td></tr></table></figure>\n\n<p>3.python装饰器</p>\n<p>对于给已有函数添加额外功能并且不影响已有函数很有用</p>\n<p>functools 中wrap的使用</p>\n<p><a href=\"http://python.jobbole.com/82344/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/82344/</a></p>\n<p><a href=\"http://lib.csdn.net/article/python/62942\" target=\"_blank\" rel=\"noopener\">http://lib.csdn.net/article/python/62942</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deco1</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'deco1'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'deco1 wrapper'</span>)</span><br><span class=\"line\">        func()</span><br><span class=\"line\">        print(<span class=\"string\">'deco1 wraper end'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deco2</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'deco2'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'deco2 wrapper'</span>)</span><br><span class=\"line\">        func()</span><br><span class=\"line\">        print(<span class=\"string\">'deco2 wraper end'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@deco1</span></span><br><span class=\"line\"><span class=\"meta\">@deco2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">aa</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'aa'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">aa()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#上面 装饰器 @deco1 @deco2从下向上执行</span></span><br><span class=\"line\"><span class=\"comment\">#先执行deco2  @deco2 就相当于执行   func2 = deco2(aa)    这时输出  deco2  返回 deco2的内函数 wrapper</span></span><br><span class=\"line\"><span class=\"comment\">#然后执行deco1 @deco1 就相当于执行 func1 = deco1(func2) = deco1(deco2(aa))  这里的func2就是 deco2的wrapper  这是输出 deco1 wrapper 然后返回 deco1的wraper</span></span><br><span class=\"line\"><span class=\"comment\">#最后的结果aa()就是 执行了 deco1的wraper函数</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出</span><br><span class=\"line\">deco2</span><br><span class=\"line\">deco1</span><br><span class=\"line\">deco1 wrapper</span><br><span class=\"line\">deco2 wrapper</span><br><span class=\"line\">aa</span><br><span class=\"line\">deco2 wraper end</span><br><span class=\"line\">deco1 wraper end</span><br></pre></td></tr></table></figure>\n\n<p>4.python 访问数据库单例模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Time    : 2018&#x2F;10&#x2F;9 17:27</span><br><span class=\"line\"># @Author  : xjzhang</span><br><span class=\"line\"># @Site    : </span><br><span class=\"line\"># @File    : db_conn.py</span><br><span class=\"line\"># @Desc    :</span><br><span class=\"line\"># @Software: PyCharm</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">from functools import wraps</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def singleton(cls):</span><br><span class=\"line\">    instances &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @wraps(cls)</span><br><span class=\"line\">    def get_instance(*args, **kw):</span><br><span class=\"line\">        if cls not in instances:</span><br><span class=\"line\">            instances[cls] &#x3D; cls(*args, **kw)</span><br><span class=\"line\">        return instances[cls]</span><br><span class=\"line\">    return get_instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 数据库连接实例</span><br><span class=\"line\">@singleton</span><br><span class=\"line\">class MySQLSingle(object):</span><br><span class=\"line\">    def __init__(self, conn&#x3D;&#39;&#39;):</span><br><span class=\"line\">        self.conn &#x3D; conn</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_conn(self,host_mysql, port_mysql, user_name_mysql, password_mysql, database):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            self.conn &#x3D; pymysql.connect(host&#x3D;host_mysql, port&#x3D;port_mysql, user&#x3D;user_name_mysql, password&#x3D;password_mysql, database&#x3D;database,</span><br><span class=\"line\">                                        charset&#x3D;&#39;utf8&#39;)</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(&#39;File to connect database: %s&#39; % e)</span><br><span class=\"line\">        return self.conn</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from service.dataBase.db_conn import MySQLSingle</span><br><span class=\"line\"></span><br><span class=\"line\">def get_train_data(train_path):</span><br><span class=\"line\">    mysql_single &#x3D; MySQLSingle()</span><br><span class=\"line\">    conn &#x3D; mysql_single.get_conn(&#39;10.1.245.214&#39;,31306,&#39;lsop&#39;,&#39;lsop&#39;,&#39;lsop&#39;)</span><br><span class=\"line\">    with conn.cursor() as cursor:</span><br><span class=\"line\">        sql &#x3D; &quot;select id,case_theme from lsop_law_by_case&quot;</span><br><span class=\"line\">        cursor.execute(sql)</span><br><span class=\"line\">        all &#x3D; cursor.fetchall()</span><br><span class=\"line\">        with open(train_path,&#39;w&#39;) as trainFile:</span><br><span class=\"line\">            trainFile.write(&#39;id\\ttheme\\n&#39;)</span><br><span class=\"line\">            for id,theme in all:</span><br><span class=\"line\">                trainFile.write(id+&#39;\\t&#39;+theme+&#39;\\n&#39;)</span><br><span class=\"line\">    conn.close()</span><br></pre></td></tr></table></figure>\n\n<p>5.爬虫-反爬策略</p>\n<p><img src=\"/2020/01/02/python%E8%AF%AD%E6%B3%95/Users/zhangxuejing/Documents/文档/爬虫策略.png\" alt=\"爬虫策略\"></p>\n<p>6.python中 <strong>repr</strong>函数</p>\n<pre><code>如果复写对象的这个函数 可以修改对象的输出信息</code></pre><ol start=\"7\">\n<li><p>安装好python后，然后使用pip install python包的时候经常会遇到一些ssl问题</p>\n<p>Could not fetch URL <a href=\"https://pypi.org/simple/jieba/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/simple/jieba/</a>: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=’pypi.org’, port=443): Max retries exceeded with url: /simple/jieba/ (Caused by SSLError(SSLError(1, ‘[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:847)’),)) - skipping</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决： 因为这个 https://pypi.org这个pip源在国内不能用需要更换pip源</span><br><span class=\"line\">修改源方法</span><br><span class=\"line\">mkdir ~/.pip </span><br><span class=\"line\">vim ~/.pip/pip.conf</span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip国内镜像源。</span><br><span class=\"line\"></span><br><span class=\"line\">阿里云 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class=\"line\">中国科技大学 https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class=\"line\">豆瓣 http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class=\"line\">Python官方 https:&#x2F;&#x2F;pypi.python.org&#x2F;simple&#x2F;  </span><br><span class=\"line\">v2ex http:&#x2F;&#x2F;pypi.v2ex.com&#x2F;simple&#x2F;</span><br><span class=\"line\">中国科学院 http:&#x2F;&#x2F;pypi.mirrors.opencas.cn&#x2F;simple&#x2F;</span><br><span class=\"line\">清华大学 https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>8.在centos中不能正常显示中文，所有中文都是乱码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决：</span><br><span class=\"line\">通过locale查看 本地字符集设置</span><br><span class=\"line\">正常为下面的列表时可以显示utf-8编码的中文字符，但是现在都是zh_en.UTF-8</span><br><span class=\"line\">LANG=zh_CN.UTF-8</span><br><span class=\"line\">LC_CTYPE=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_NUMERIC=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_TIME=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_COLLATE=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_MONETARY=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_MESSAGES=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_PAPER=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_NAME=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_ADDRESS=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_TELEPHONE=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_MEASUREMENT=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_IDENTIFICATION=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_ALL=zh_CN.UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">此时可以修改locale</span><br><span class=\"line\">通过 locale -a | grep zh  查看是否有 zh_CN.UTF-8的字符集</span><br><span class=\"line\">如果有 在.bashrc中添加 export LC_ALL=zh_CN.UTF-8  然后 source .bashrc即可</span><br><span class=\"line\">如果没有，可以在其他正常的centos系统中 /usr/lib/locale/目录下拷贝locale-archive 覆盖 当前机器系统的 /usr/lib/locale/ 的locale-archive 然后重复上面操作</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>1.正则</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#正则去按照正则的组去替换文本</span></span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">r'\\[(.*?)\\]/fzjg'</span>)</span><br><span class=\"line\">testContent = pattern.sub(<span class=\"string\">r'\\1'</span>, fileContent)</span><br><span class=\"line\"><span class=\"comment\">#将fileContent中所有符合pattern的文本内容替换为 pattern匹配组1的内容</span></span><br><span class=\"line\"><span class=\"comment\">#例： [2013年7月11日，被告人乌某对被害人刘某谎称自己有工作，从被害人刘某处借款人民币50,000元。]/fzjg案发后偿还了人民币26,000元。</span></span><br><span class=\"line\"><span class=\"comment\">#结果为：2013年7月11日，被告人乌某对被害人刘某谎称自己有工作，从被害人刘某处借款人民币50,000元。案发后偿还了人民币26,000元。</span></span><br></pre></td></tr></table></figure>\n\n<p>2.在单独的python脚本中引入另一个目录中的python脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\">basedir = basedir.split(<span class=\"string\">\"service\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">sys.path.append(basedir)  <span class=\"comment\">#重要的一部分  将需要引入的那个目录加到python系统路径中之后再引用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> service.dataBase.db_conn <span class=\"keyword\">import</span> MySQLSingle</span><br></pre></td></tr></table></figure>\n\n<p>3.python装饰器</p>\n<p>对于给已有函数添加额外功能并且不影响已有函数很有用</p>\n<p>functools 中wrap的使用</p>\n<p><a href=\"http://python.jobbole.com/82344/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/82344/</a></p>\n<p><a href=\"http://lib.csdn.net/article/python/62942\" target=\"_blank\" rel=\"noopener\">http://lib.csdn.net/article/python/62942</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deco1</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'deco1'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'deco1 wrapper'</span>)</span><br><span class=\"line\">        func()</span><br><span class=\"line\">        print(<span class=\"string\">'deco1 wraper end'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deco2</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'deco2'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'deco2 wrapper'</span>)</span><br><span class=\"line\">        func()</span><br><span class=\"line\">        print(<span class=\"string\">'deco2 wraper end'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@deco1</span></span><br><span class=\"line\"><span class=\"meta\">@deco2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">aa</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'aa'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">aa()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#上面 装饰器 @deco1 @deco2从下向上执行</span></span><br><span class=\"line\"><span class=\"comment\">#先执行deco2  @deco2 就相当于执行   func2 = deco2(aa)    这时输出  deco2  返回 deco2的内函数 wrapper</span></span><br><span class=\"line\"><span class=\"comment\">#然后执行deco1 @deco1 就相当于执行 func1 = deco1(func2) = deco1(deco2(aa))  这里的func2就是 deco2的wrapper  这是输出 deco1 wrapper 然后返回 deco1的wraper</span></span><br><span class=\"line\"><span class=\"comment\">#最后的结果aa()就是 执行了 deco1的wraper函数</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出</span><br><span class=\"line\">deco2</span><br><span class=\"line\">deco1</span><br><span class=\"line\">deco1 wrapper</span><br><span class=\"line\">deco2 wrapper</span><br><span class=\"line\">aa</span><br><span class=\"line\">deco2 wraper end</span><br><span class=\"line\">deco1 wraper end</span><br></pre></td></tr></table></figure>\n\n<p>4.python 访问数据库单例模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"># @Time    : 2018&#x2F;10&#x2F;9 17:27</span><br><span class=\"line\"># @Author  : xjzhang</span><br><span class=\"line\"># @Site    : </span><br><span class=\"line\"># @File    : db_conn.py</span><br><span class=\"line\"># @Desc    :</span><br><span class=\"line\"># @Software: PyCharm</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">from functools import wraps</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def singleton(cls):</span><br><span class=\"line\">    instances &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @wraps(cls)</span><br><span class=\"line\">    def get_instance(*args, **kw):</span><br><span class=\"line\">        if cls not in instances:</span><br><span class=\"line\">            instances[cls] &#x3D; cls(*args, **kw)</span><br><span class=\"line\">        return instances[cls]</span><br><span class=\"line\">    return get_instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 数据库连接实例</span><br><span class=\"line\">@singleton</span><br><span class=\"line\">class MySQLSingle(object):</span><br><span class=\"line\">    def __init__(self, conn&#x3D;&#39;&#39;):</span><br><span class=\"line\">        self.conn &#x3D; conn</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_conn(self,host_mysql, port_mysql, user_name_mysql, password_mysql, database):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            self.conn &#x3D; pymysql.connect(host&#x3D;host_mysql, port&#x3D;port_mysql, user&#x3D;user_name_mysql, password&#x3D;password_mysql, database&#x3D;database,</span><br><span class=\"line\">                                        charset&#x3D;&#39;utf8&#39;)</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(&#39;File to connect database: %s&#39; % e)</span><br><span class=\"line\">        return self.conn</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from service.dataBase.db_conn import MySQLSingle</span><br><span class=\"line\"></span><br><span class=\"line\">def get_train_data(train_path):</span><br><span class=\"line\">    mysql_single &#x3D; MySQLSingle()</span><br><span class=\"line\">    conn &#x3D; mysql_single.get_conn(&#39;10.1.245.214&#39;,31306,&#39;lsop&#39;,&#39;lsop&#39;,&#39;lsop&#39;)</span><br><span class=\"line\">    with conn.cursor() as cursor:</span><br><span class=\"line\">        sql &#x3D; &quot;select id,case_theme from lsop_law_by_case&quot;</span><br><span class=\"line\">        cursor.execute(sql)</span><br><span class=\"line\">        all &#x3D; cursor.fetchall()</span><br><span class=\"line\">        with open(train_path,&#39;w&#39;) as trainFile:</span><br><span class=\"line\">            trainFile.write(&#39;id\\ttheme\\n&#39;)</span><br><span class=\"line\">            for id,theme in all:</span><br><span class=\"line\">                trainFile.write(id+&#39;\\t&#39;+theme+&#39;\\n&#39;)</span><br><span class=\"line\">    conn.close()</span><br></pre></td></tr></table></figure>\n\n<p>5.爬虫-反爬策略</p>\n<p><img src=\"/2020/01/02/python%E8%AF%AD%E6%B3%95/Users/zhangxuejing/Documents/文档/爬虫策略.png\" alt=\"爬虫策略\"></p>\n<p>6.python中 <strong>repr</strong>函数</p>\n<pre><code>如果复写对象的这个函数 可以修改对象的输出信息</code></pre><ol start=\"7\">\n<li><p>安装好python后，然后使用pip install python包的时候经常会遇到一些ssl问题</p>\n<p>Could not fetch URL <a href=\"https://pypi.org/simple/jieba/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/simple/jieba/</a>: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=’pypi.org’, port=443): Max retries exceeded with url: /simple/jieba/ (Caused by SSLError(SSLError(1, ‘[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:847)’),)) - skipping</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决： 因为这个 https://pypi.org这个pip源在国内不能用需要更换pip源</span><br><span class=\"line\">修改源方法</span><br><span class=\"line\">mkdir ~/.pip </span><br><span class=\"line\">vim ~/.pip/pip.conf</span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip国内镜像源。</span><br><span class=\"line\"></span><br><span class=\"line\">阿里云 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class=\"line\">中国科技大学 https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class=\"line\">豆瓣 http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class=\"line\">Python官方 https:&#x2F;&#x2F;pypi.python.org&#x2F;simple&#x2F;  </span><br><span class=\"line\">v2ex http:&#x2F;&#x2F;pypi.v2ex.com&#x2F;simple&#x2F;</span><br><span class=\"line\">中国科学院 http:&#x2F;&#x2F;pypi.mirrors.opencas.cn&#x2F;simple&#x2F;</span><br><span class=\"line\">清华大学 https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>8.在centos中不能正常显示中文，所有中文都是乱码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决：</span><br><span class=\"line\">通过locale查看 本地字符集设置</span><br><span class=\"line\">正常为下面的列表时可以显示utf-8编码的中文字符，但是现在都是zh_en.UTF-8</span><br><span class=\"line\">LANG=zh_CN.UTF-8</span><br><span class=\"line\">LC_CTYPE=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_NUMERIC=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_TIME=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_COLLATE=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_MONETARY=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_MESSAGES=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_PAPER=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_NAME=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_ADDRESS=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_TELEPHONE=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_MEASUREMENT=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_IDENTIFICATION=\"zh_CN.UTF-8\"</span><br><span class=\"line\">LC_ALL=zh_CN.UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">此时可以修改locale</span><br><span class=\"line\">通过 locale -a | grep zh  查看是否有 zh_CN.UTF-8的字符集</span><br><span class=\"line\">如果有 在.bashrc中添加 export LC_ALL=zh_CN.UTF-8  然后 source .bashrc即可</span><br><span class=\"line\">如果没有，可以在其他正常的centos系统中 /usr/lib/locale/目录下拷贝locale-archive 覆盖 当前机器系统的 /usr/lib/locale/ 的locale-archive 然后重复上面操作</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"_content":"1.vue项目启动原理\n\n<https://blog.csdn.net/cxf8881/article/details/80620545>\n\n","source":"_posts/vue原理.md","raw":"---\ncategories: 前端\n---\n1.vue项目启动原理\n\n<https://blog.csdn.net/cxf8881/article/details/80620545>\n\n","slug":"vue原理","published":1,"date":"2020-01-02T09:17:45.232Z","updated":"2020-01-02T09:17:45.232Z","title":"vue原理","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4y00s9c00076ds62ywo0cwn","content":"<p>1.vue项目启动原理</p>\n<p><a href=\"https://blog.csdn.net/cxf8881/article/details/80620545\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/cxf8881/article/details/80620545</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.vue项目启动原理</p>\n<p><a href=\"https://blog.csdn.net/cxf8881/article/details/80620545\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/cxf8881/article/details/80620545</a></p>\n"},{"_content":"本篇文档是对 《编写高质量代码改善Python程序的91个建议》一书的记录\n\nPythonic代码 \n\n```\n优美胜于丑陋（Python 以编写优美的代码为目标）\n明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）\n简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）\n复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）\n扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）\n间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）\n可读性很重要（优美的代码是可读的）\n--Python之禅\n```\n\n1.交换变量\n\n```\na,b = b,a   #充分利用python特色很简洁\n```\n\n2.迭代列表\n\n```\nfor i in alist:\n\tdo_something(i)\n```\n\n3.倒序列表或者字符串\n\n```\na = [1,2,3,4]\nb = 'abcdefg'\nprint(a[::-1])\nprint(b[::-1]) #不可取 因为不太具有可读性 不太容易理解\n\n可以变为使用 reversed函数\nprint(list(reversed(a)))\nprint(list(reversed(b)))\n```\n\n4.输出\n\n```\nprint 'Hello %s!' % ('Tom',)\n\n但是当变量数量多时 可读性变差，可以使用下面的方式\nprint  'Hello %(name)s!' % {'name':'Tom'}\n\n举例：\nvalue = {'greet':'Hello word','language':'python'}\nprint '%(greet)s from %(language)s' % value\n\n但是%占位符源于对python的先验知识，对于新手有点不明白，所以下面的代码更合适\nprint '{greet} from {language}'.format(greet='Hello word',language='python')\n[上面利用的是 python的  str.format() 这个方法]\n```\n\n5.关于包和模块\n\n```\n包和模块的命名采用小写，单数形式，而且短小\n包通常仅作为命名空间，如只包含空的__init__.py文件\n```\n\n6.编写Pythonic代码\n\n```\n1.避免劣化代码\n\t(1).避免只用大小写来区分不同的对象，如 变量a 是数值类型  变量A为字符串类型\n\t(2).避免使用容易引起混淆的名称，变量名要和所解决的问题一致\n\t(3).不要害怕过长的变量名，不要为了少些几个字符过分缩写，例如 person_info 的可读性比 pi 高很多\n2.深入认识python\n\t(1).全面掌握Python提供给我们的所有特性，包括语言特性和库特性。其中最好的学习方式就是通读官方手册中的Language Reference 和 Library Reference。掌握了语言特性和库特性，就会利用很多python的惯用法。\n\t(2).随着python的迭代更新，不断学习新版本中更新的特性\n\t(3).深入学习业界公认的比较Pythonic的代码 如 flask,gevent,requests等\n3.利用工具  (pip install pep8) 检测不符合代码格式的代码\n4.注释的艺术\n\t(1)不写无用的注释\n\t(2)注释那些别人难以理解的或者不够一目了然的代码\n\t(3)注释和代码隔开一定距离 例：x=x+1       #increace x by 1\n\t(4)给外部可访问的函数和方法添加文档注释(函数注释要形成一定的规范，可参考python第三方库中的注释)\n\t(5)推荐在文件头添加 copyright,模块声明 等信息\n\t(6)注释是对代码的功能，原因以及想法进行注释 不要做一些无用的注释\n\t(7)代码与注释同步更新\n5.常量的管理\n\t(1)常量名所有字母大写 用下划线连接\n\t(2)可以通过自定义的类实现常量功能。需要符合 命名全部为大写和值一旦绑定不可修改\n\t\t\n\t\tconst.py\n\t\tclass _const:\n\t\t\tclass ConstError(TypeError):pass\n\t\t\tclass ConstCaseError(ConstError):pass\n\t\t\t\n\t\t\tdef __setattr__(self,name,value):\n\t\t\t\tif name in self.__dict__.keys():\n\t\t\t\t\traise self.ConstError,\"can't change const.%s\" % name\n\t\t\t\tif not name.isupper():\n\t\t\t\t\traise self.ConstCaseErrpr,'const name \"%s\" is not all uppercase' % name\n\t\t\t\tself.__dict__[name] = value\n\t\t\n\timport sys\n\tsys.modules[__name__] = _const()\n\t\n\ttest.py\n\timport const\n\tconst.NAME = 'zhang'\n\t\n\t##\n\t这里第一次接触这样定义常量，需要理解 __name__ ，sys.modules，import 和 from...import...区别\n\t(1)__name__是python模块中的一个变量  用来表示模块名。如果在本模块中打印则__name__为__main__，如果这个模块在其他模块中被调用 则name为模块名称\n\t(2)sys.modules 是一个全局的字典 里面存放了和模块名对应的模块， python运行时会放在内存中\n\t(3) import 模块 ???\n\t##\n```\n\n惯用法\n\n1.assert 断言的使用\n\n```\n不要滥用断言\n断言实际用来捕获用户定义的约束的，当条件是业务逻辑继续下去的先决条件时可以使用断言。如 前面代码必须要保证变量x,和y一致，而下面业务进行下去的条件是x和y一致 可以使用断言 assert x==y,'not equal'\n当函数调用后，需要确认返回值是否合理时可以使用断言\n```\n\n2.数据交换值时不建议使用中间变量\n\n```\ntemp = x\nx = y\ny = temp\n\n与代码\nx,y = y,x \n\n比较下面的方法更加pyhtonic 并且也更加高效\n```\n\n3.充分利用 Lazy evaluation （延迟计算，惰性计算）的优势，即在真正需要计算的时候才计算的表达式\n\n```\n(1).避免不必要的计算，比如 if x and y 时 要将x和y中为False的几率大的放在前面 和 if x or y 将为True几率大的放在前面。 \n(2).节省空间，python最典型的延迟计算就是使用 生成器表达式，仅仅在每次需要的时候才通过yield产生数据，例如斐波那契数列，就不会出现在其他语言中while True时遇到的无限循环的例子\n \tdef fib():\n \t\ta,b = 0,1\n \t\twhile True:\n \t\t\tyield a\n \t\t\ta,b = b,a+b\n \tfrom itertools import islice\n \tprint(list(islice(fib(),5)))  #[0，1，1，2，3]\n```\n\n4.","source":"_posts/改善python程序91个建议.md","raw":"---\ncategories: 随笔\n---\n本篇文档是对 《编写高质量代码改善Python程序的91个建议》一书的记录\n\nPythonic代码 \n\n```\n优美胜于丑陋（Python 以编写优美的代码为目标）\n明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）\n简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）\n复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）\n扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）\n间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）\n可读性很重要（优美的代码是可读的）\n--Python之禅\n```\n\n1.交换变量\n\n```\na,b = b,a   #充分利用python特色很简洁\n```\n\n2.迭代列表\n\n```\nfor i in alist:\n\tdo_something(i)\n```\n\n3.倒序列表或者字符串\n\n```\na = [1,2,3,4]\nb = 'abcdefg'\nprint(a[::-1])\nprint(b[::-1]) #不可取 因为不太具有可读性 不太容易理解\n\n可以变为使用 reversed函数\nprint(list(reversed(a)))\nprint(list(reversed(b)))\n```\n\n4.输出\n\n```\nprint 'Hello %s!' % ('Tom',)\n\n但是当变量数量多时 可读性变差，可以使用下面的方式\nprint  'Hello %(name)s!' % {'name':'Tom'}\n\n举例：\nvalue = {'greet':'Hello word','language':'python'}\nprint '%(greet)s from %(language)s' % value\n\n但是%占位符源于对python的先验知识，对于新手有点不明白，所以下面的代码更合适\nprint '{greet} from {language}'.format(greet='Hello word',language='python')\n[上面利用的是 python的  str.format() 这个方法]\n```\n\n5.关于包和模块\n\n```\n包和模块的命名采用小写，单数形式，而且短小\n包通常仅作为命名空间，如只包含空的__init__.py文件\n```\n\n6.编写Pythonic代码\n\n```\n1.避免劣化代码\n\t(1).避免只用大小写来区分不同的对象，如 变量a 是数值类型  变量A为字符串类型\n\t(2).避免使用容易引起混淆的名称，变量名要和所解决的问题一致\n\t(3).不要害怕过长的变量名，不要为了少些几个字符过分缩写，例如 person_info 的可读性比 pi 高很多\n2.深入认识python\n\t(1).全面掌握Python提供给我们的所有特性，包括语言特性和库特性。其中最好的学习方式就是通读官方手册中的Language Reference 和 Library Reference。掌握了语言特性和库特性，就会利用很多python的惯用法。\n\t(2).随着python的迭代更新，不断学习新版本中更新的特性\n\t(3).深入学习业界公认的比较Pythonic的代码 如 flask,gevent,requests等\n3.利用工具  (pip install pep8) 检测不符合代码格式的代码\n4.注释的艺术\n\t(1)不写无用的注释\n\t(2)注释那些别人难以理解的或者不够一目了然的代码\n\t(3)注释和代码隔开一定距离 例：x=x+1       #increace x by 1\n\t(4)给外部可访问的函数和方法添加文档注释(函数注释要形成一定的规范，可参考python第三方库中的注释)\n\t(5)推荐在文件头添加 copyright,模块声明 等信息\n\t(6)注释是对代码的功能，原因以及想法进行注释 不要做一些无用的注释\n\t(7)代码与注释同步更新\n5.常量的管理\n\t(1)常量名所有字母大写 用下划线连接\n\t(2)可以通过自定义的类实现常量功能。需要符合 命名全部为大写和值一旦绑定不可修改\n\t\t\n\t\tconst.py\n\t\tclass _const:\n\t\t\tclass ConstError(TypeError):pass\n\t\t\tclass ConstCaseError(ConstError):pass\n\t\t\t\n\t\t\tdef __setattr__(self,name,value):\n\t\t\t\tif name in self.__dict__.keys():\n\t\t\t\t\traise self.ConstError,\"can't change const.%s\" % name\n\t\t\t\tif not name.isupper():\n\t\t\t\t\traise self.ConstCaseErrpr,'const name \"%s\" is not all uppercase' % name\n\t\t\t\tself.__dict__[name] = value\n\t\t\n\timport sys\n\tsys.modules[__name__] = _const()\n\t\n\ttest.py\n\timport const\n\tconst.NAME = 'zhang'\n\t\n\t##\n\t这里第一次接触这样定义常量，需要理解 __name__ ，sys.modules，import 和 from...import...区别\n\t(1)__name__是python模块中的一个变量  用来表示模块名。如果在本模块中打印则__name__为__main__，如果这个模块在其他模块中被调用 则name为模块名称\n\t(2)sys.modules 是一个全局的字典 里面存放了和模块名对应的模块， python运行时会放在内存中\n\t(3) import 模块 ???\n\t##\n```\n\n惯用法\n\n1.assert 断言的使用\n\n```\n不要滥用断言\n断言实际用来捕获用户定义的约束的，当条件是业务逻辑继续下去的先决条件时可以使用断言。如 前面代码必须要保证变量x,和y一致，而下面业务进行下去的条件是x和y一致 可以使用断言 assert x==y,'not equal'\n当函数调用后，需要确认返回值是否合理时可以使用断言\n```\n\n2.数据交换值时不建议使用中间变量\n\n```\ntemp = x\nx = y\ny = temp\n\n与代码\nx,y = y,x \n\n比较下面的方法更加pyhtonic 并且也更加高效\n```\n\n3.充分利用 Lazy evaluation （延迟计算，惰性计算）的优势，即在真正需要计算的时候才计算的表达式\n\n```\n(1).避免不必要的计算，比如 if x and y 时 要将x和y中为False的几率大的放在前面 和 if x or y 将为True几率大的放在前面。 \n(2).节省空间，python最典型的延迟计算就是使用 生成器表达式，仅仅在每次需要的时候才通过yield产生数据，例如斐波那契数列，就不会出现在其他语言中while True时遇到的无限循环的例子\n \tdef fib():\n \t\ta,b = 0,1\n \t\twhile True:\n \t\t\tyield a\n \t\t\ta,b = b,a+b\n \tfrom itertools import islice\n \tprint(list(islice(fib(),5)))  #[0，1，1，2，3]\n```\n\n4.","slug":"改善python程序91个建议","published":1,"date":"2020-01-02T09:16:18.815Z","updated":"2020-01-02T09:16:18.815Z","title":"改善python程序91个建议","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4y00s9e00086ds6fwe5f9bk","content":"<p>本篇文档是对 《编写高质量代码改善Python程序的91个建议》一书的记录</p>\n<p>Pythonic代码 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">优美胜于丑陋（Python 以编写优美的代码为目标）</span><br><span class=\"line\">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class=\"line\">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class=\"line\">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class=\"line\">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class=\"line\">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class=\"line\">可读性很重要（优美的代码是可读的）</span><br><span class=\"line\">--Python之禅</span><br></pre></td></tr></table></figure>\n\n<p>1.交换变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a,b &#x3D; b,a   #充分利用python特色很简洁</span><br></pre></td></tr></table></figure>\n\n<p>2.迭代列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in alist:</span><br><span class=\"line\">\tdo_something(i)</span><br></pre></td></tr></table></figure>\n\n<p>3.倒序列表或者字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; [1,2,3,4]</span><br><span class=\"line\">b &#x3D; &#39;abcdefg&#39;</span><br><span class=\"line\">print(a[::-1])</span><br><span class=\"line\">print(b[::-1]) #不可取 因为不太具有可读性 不太容易理解</span><br><span class=\"line\"></span><br><span class=\"line\">可以变为使用 reversed函数</span><br><span class=\"line\">print(list(reversed(a)))</span><br><span class=\"line\">print(list(reversed(b)))</span><br></pre></td></tr></table></figure>\n\n<p>4.输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print &#39;Hello %s!&#39; % (&#39;Tom&#39;,)</span><br><span class=\"line\"></span><br><span class=\"line\">但是当变量数量多时 可读性变差，可以使用下面的方式</span><br><span class=\"line\">print  &#39;Hello %(name)s!&#39; % &#123;&#39;name&#39;:&#39;Tom&#39;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">举例：</span><br><span class=\"line\">value &#x3D; &#123;&#39;greet&#39;:&#39;Hello word&#39;,&#39;language&#39;:&#39;python&#39;&#125;</span><br><span class=\"line\">print &#39;%(greet)s from %(language)s&#39; % value</span><br><span class=\"line\"></span><br><span class=\"line\">但是%占位符源于对python的先验知识，对于新手有点不明白，所以下面的代码更合适</span><br><span class=\"line\">print &#39;&#123;greet&#125; from &#123;language&#125;&#39;.format(greet&#x3D;&#39;Hello word&#39;,language&#x3D;&#39;python&#39;)</span><br><span class=\"line\">[上面利用的是 python的  str.format() 这个方法]</span><br></pre></td></tr></table></figure>\n\n<p>5.关于包和模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包和模块的命名采用小写，单数形式，而且短小</span><br><span class=\"line\">包通常仅作为命名空间，如只包含空的__init__.py文件</span><br></pre></td></tr></table></figure>\n\n<p>6.编写Pythonic代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.避免劣化代码</span><br><span class=\"line\">\t(1).避免只用大小写来区分不同的对象，如 变量a 是数值类型  变量A为字符串类型</span><br><span class=\"line\">\t(2).避免使用容易引起混淆的名称，变量名要和所解决的问题一致</span><br><span class=\"line\">\t(3).不要害怕过长的变量名，不要为了少些几个字符过分缩写，例如 person_info 的可读性比 pi 高很多</span><br><span class=\"line\">2.深入认识python</span><br><span class=\"line\">\t(1).全面掌握Python提供给我们的所有特性，包括语言特性和库特性。其中最好的学习方式就是通读官方手册中的Language Reference 和 Library Reference。掌握了语言特性和库特性，就会利用很多python的惯用法。</span><br><span class=\"line\">\t(2).随着python的迭代更新，不断学习新版本中更新的特性</span><br><span class=\"line\">\t(3).深入学习业界公认的比较Pythonic的代码 如 flask,gevent,requests等</span><br><span class=\"line\">3.利用工具  (pip install pep8) 检测不符合代码格式的代码</span><br><span class=\"line\">4.注释的艺术</span><br><span class=\"line\">\t(1)不写无用的注释</span><br><span class=\"line\">\t(2)注释那些别人难以理解的或者不够一目了然的代码</span><br><span class=\"line\">\t(3)注释和代码隔开一定距离 例：x&#x3D;x+1       #increace x by 1</span><br><span class=\"line\">\t(4)给外部可访问的函数和方法添加文档注释(函数注释要形成一定的规范，可参考python第三方库中的注释)</span><br><span class=\"line\">\t(5)推荐在文件头添加 copyright,模块声明 等信息</span><br><span class=\"line\">\t(6)注释是对代码的功能，原因以及想法进行注释 不要做一些无用的注释</span><br><span class=\"line\">\t(7)代码与注释同步更新</span><br><span class=\"line\">5.常量的管理</span><br><span class=\"line\">\t(1)常量名所有字母大写 用下划线连接</span><br><span class=\"line\">\t(2)可以通过自定义的类实现常量功能。需要符合 命名全部为大写和值一旦绑定不可修改</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconst.py</span><br><span class=\"line\">\t\tclass _const:</span><br><span class=\"line\">\t\t\tclass ConstError(TypeError):pass</span><br><span class=\"line\">\t\t\tclass ConstCaseError(ConstError):pass</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tdef __setattr__(self,name,value):</span><br><span class=\"line\">\t\t\t\tif name in self.__dict__.keys():</span><br><span class=\"line\">\t\t\t\t\traise self.ConstError,&quot;can&#39;t change const.%s&quot; % name</span><br><span class=\"line\">\t\t\t\tif not name.isupper():</span><br><span class=\"line\">\t\t\t\t\traise self.ConstCaseErrpr,&#39;const name &quot;%s&quot; is not all uppercase&#39; % name</span><br><span class=\"line\">\t\t\t\tself.__dict__[name] &#x3D; value</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\timport sys</span><br><span class=\"line\">\tsys.modules[__name__] &#x3D; _const()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\ttest.py</span><br><span class=\"line\">\timport const</span><br><span class=\"line\">\tconst.NAME &#x3D; &#39;zhang&#39;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t##</span><br><span class=\"line\">\t这里第一次接触这样定义常量，需要理解 __name__ ，sys.modules，import 和 from...import...区别</span><br><span class=\"line\">\t(1)__name__是python模块中的一个变量  用来表示模块名。如果在本模块中打印则__name__为__main__，如果这个模块在其他模块中被调用 则name为模块名称</span><br><span class=\"line\">\t(2)sys.modules 是一个全局的字典 里面存放了和模块名对应的模块， python运行时会放在内存中</span><br><span class=\"line\">\t(3) import 模块 ???</span><br><span class=\"line\">\t##</span><br></pre></td></tr></table></figure>\n\n<p>惯用法</p>\n<p>1.assert 断言的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不要滥用断言</span><br><span class=\"line\">断言实际用来捕获用户定义的约束的，当条件是业务逻辑继续下去的先决条件时可以使用断言。如 前面代码必须要保证变量x,和y一致，而下面业务进行下去的条件是x和y一致 可以使用断言 assert x&#x3D;&#x3D;y,&#39;not equal&#39;</span><br><span class=\"line\">当函数调用后，需要确认返回值是否合理时可以使用断言</span><br></pre></td></tr></table></figure>\n\n<p>2.数据交换值时不建议使用中间变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp &#x3D; x</span><br><span class=\"line\">x &#x3D; y</span><br><span class=\"line\">y &#x3D; temp</span><br><span class=\"line\"></span><br><span class=\"line\">与代码</span><br><span class=\"line\">x,y &#x3D; y,x </span><br><span class=\"line\"></span><br><span class=\"line\">比较下面的方法更加pyhtonic 并且也更加高效</span><br></pre></td></tr></table></figure>\n\n<p>3.充分利用 Lazy evaluation （延迟计算，惰性计算）的优势，即在真正需要计算的时候才计算的表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1).避免不必要的计算，比如 if x and y 时 要将x和y中为False的几率大的放在前面 和 if x or y 将为True几率大的放在前面。 </span><br><span class=\"line\">(2).节省空间，python最典型的延迟计算就是使用 生成器表达式，仅仅在每次需要的时候才通过yield产生数据，例如斐波那契数列，就不会出现在其他语言中while True时遇到的无限循环的例子</span><br><span class=\"line\"> \tdef fib():</span><br><span class=\"line\"> \t\ta,b &#x3D; 0,1</span><br><span class=\"line\"> \t\twhile True:</span><br><span class=\"line\"> \t\t\tyield a</span><br><span class=\"line\"> \t\t\ta,b &#x3D; b,a+b</span><br><span class=\"line\"> \tfrom itertools import islice</span><br><span class=\"line\"> \tprint(list(islice(fib(),5)))  #[0，1，1，2，3]</span><br></pre></td></tr></table></figure>\n\n<p>4.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇文档是对 《编写高质量代码改善Python程序的91个建议》一书的记录</p>\n<p>Pythonic代码 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">优美胜于丑陋（Python 以编写优美的代码为目标）</span><br><span class=\"line\">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class=\"line\">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class=\"line\">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class=\"line\">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class=\"line\">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class=\"line\">可读性很重要（优美的代码是可读的）</span><br><span class=\"line\">--Python之禅</span><br></pre></td></tr></table></figure>\n\n<p>1.交换变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a,b &#x3D; b,a   #充分利用python特色很简洁</span><br></pre></td></tr></table></figure>\n\n<p>2.迭代列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in alist:</span><br><span class=\"line\">\tdo_something(i)</span><br></pre></td></tr></table></figure>\n\n<p>3.倒序列表或者字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &#x3D; [1,2,3,4]</span><br><span class=\"line\">b &#x3D; &#39;abcdefg&#39;</span><br><span class=\"line\">print(a[::-1])</span><br><span class=\"line\">print(b[::-1]) #不可取 因为不太具有可读性 不太容易理解</span><br><span class=\"line\"></span><br><span class=\"line\">可以变为使用 reversed函数</span><br><span class=\"line\">print(list(reversed(a)))</span><br><span class=\"line\">print(list(reversed(b)))</span><br></pre></td></tr></table></figure>\n\n<p>4.输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print &#39;Hello %s!&#39; % (&#39;Tom&#39;,)</span><br><span class=\"line\"></span><br><span class=\"line\">但是当变量数量多时 可读性变差，可以使用下面的方式</span><br><span class=\"line\">print  &#39;Hello %(name)s!&#39; % &#123;&#39;name&#39;:&#39;Tom&#39;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">举例：</span><br><span class=\"line\">value &#x3D; &#123;&#39;greet&#39;:&#39;Hello word&#39;,&#39;language&#39;:&#39;python&#39;&#125;</span><br><span class=\"line\">print &#39;%(greet)s from %(language)s&#39; % value</span><br><span class=\"line\"></span><br><span class=\"line\">但是%占位符源于对python的先验知识，对于新手有点不明白，所以下面的代码更合适</span><br><span class=\"line\">print &#39;&#123;greet&#125; from &#123;language&#125;&#39;.format(greet&#x3D;&#39;Hello word&#39;,language&#x3D;&#39;python&#39;)</span><br><span class=\"line\">[上面利用的是 python的  str.format() 这个方法]</span><br></pre></td></tr></table></figure>\n\n<p>5.关于包和模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包和模块的命名采用小写，单数形式，而且短小</span><br><span class=\"line\">包通常仅作为命名空间，如只包含空的__init__.py文件</span><br></pre></td></tr></table></figure>\n\n<p>6.编写Pythonic代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.避免劣化代码</span><br><span class=\"line\">\t(1).避免只用大小写来区分不同的对象，如 变量a 是数值类型  变量A为字符串类型</span><br><span class=\"line\">\t(2).避免使用容易引起混淆的名称，变量名要和所解决的问题一致</span><br><span class=\"line\">\t(3).不要害怕过长的变量名，不要为了少些几个字符过分缩写，例如 person_info 的可读性比 pi 高很多</span><br><span class=\"line\">2.深入认识python</span><br><span class=\"line\">\t(1).全面掌握Python提供给我们的所有特性，包括语言特性和库特性。其中最好的学习方式就是通读官方手册中的Language Reference 和 Library Reference。掌握了语言特性和库特性，就会利用很多python的惯用法。</span><br><span class=\"line\">\t(2).随着python的迭代更新，不断学习新版本中更新的特性</span><br><span class=\"line\">\t(3).深入学习业界公认的比较Pythonic的代码 如 flask,gevent,requests等</span><br><span class=\"line\">3.利用工具  (pip install pep8) 检测不符合代码格式的代码</span><br><span class=\"line\">4.注释的艺术</span><br><span class=\"line\">\t(1)不写无用的注释</span><br><span class=\"line\">\t(2)注释那些别人难以理解的或者不够一目了然的代码</span><br><span class=\"line\">\t(3)注释和代码隔开一定距离 例：x&#x3D;x+1       #increace x by 1</span><br><span class=\"line\">\t(4)给外部可访问的函数和方法添加文档注释(函数注释要形成一定的规范，可参考python第三方库中的注释)</span><br><span class=\"line\">\t(5)推荐在文件头添加 copyright,模块声明 等信息</span><br><span class=\"line\">\t(6)注释是对代码的功能，原因以及想法进行注释 不要做一些无用的注释</span><br><span class=\"line\">\t(7)代码与注释同步更新</span><br><span class=\"line\">5.常量的管理</span><br><span class=\"line\">\t(1)常量名所有字母大写 用下划线连接</span><br><span class=\"line\">\t(2)可以通过自定义的类实现常量功能。需要符合 命名全部为大写和值一旦绑定不可修改</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconst.py</span><br><span class=\"line\">\t\tclass _const:</span><br><span class=\"line\">\t\t\tclass ConstError(TypeError):pass</span><br><span class=\"line\">\t\t\tclass ConstCaseError(ConstError):pass</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tdef __setattr__(self,name,value):</span><br><span class=\"line\">\t\t\t\tif name in self.__dict__.keys():</span><br><span class=\"line\">\t\t\t\t\traise self.ConstError,&quot;can&#39;t change const.%s&quot; % name</span><br><span class=\"line\">\t\t\t\tif not name.isupper():</span><br><span class=\"line\">\t\t\t\t\traise self.ConstCaseErrpr,&#39;const name &quot;%s&quot; is not all uppercase&#39; % name</span><br><span class=\"line\">\t\t\t\tself.__dict__[name] &#x3D; value</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\timport sys</span><br><span class=\"line\">\tsys.modules[__name__] &#x3D; _const()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\ttest.py</span><br><span class=\"line\">\timport const</span><br><span class=\"line\">\tconst.NAME &#x3D; &#39;zhang&#39;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t##</span><br><span class=\"line\">\t这里第一次接触这样定义常量，需要理解 __name__ ，sys.modules，import 和 from...import...区别</span><br><span class=\"line\">\t(1)__name__是python模块中的一个变量  用来表示模块名。如果在本模块中打印则__name__为__main__，如果这个模块在其他模块中被调用 则name为模块名称</span><br><span class=\"line\">\t(2)sys.modules 是一个全局的字典 里面存放了和模块名对应的模块， python运行时会放在内存中</span><br><span class=\"line\">\t(3) import 模块 ???</span><br><span class=\"line\">\t##</span><br></pre></td></tr></table></figure>\n\n<p>惯用法</p>\n<p>1.assert 断言的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不要滥用断言</span><br><span class=\"line\">断言实际用来捕获用户定义的约束的，当条件是业务逻辑继续下去的先决条件时可以使用断言。如 前面代码必须要保证变量x,和y一致，而下面业务进行下去的条件是x和y一致 可以使用断言 assert x&#x3D;&#x3D;y,&#39;not equal&#39;</span><br><span class=\"line\">当函数调用后，需要确认返回值是否合理时可以使用断言</span><br></pre></td></tr></table></figure>\n\n<p>2.数据交换值时不建议使用中间变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp &#x3D; x</span><br><span class=\"line\">x &#x3D; y</span><br><span class=\"line\">y &#x3D; temp</span><br><span class=\"line\"></span><br><span class=\"line\">与代码</span><br><span class=\"line\">x,y &#x3D; y,x </span><br><span class=\"line\"></span><br><span class=\"line\">比较下面的方法更加pyhtonic 并且也更加高效</span><br></pre></td></tr></table></figure>\n\n<p>3.充分利用 Lazy evaluation （延迟计算，惰性计算）的优势，即在真正需要计算的时候才计算的表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1).避免不必要的计算，比如 if x and y 时 要将x和y中为False的几率大的放在前面 和 if x or y 将为True几率大的放在前面。 </span><br><span class=\"line\">(2).节省空间，python最典型的延迟计算就是使用 生成器表达式，仅仅在每次需要的时候才通过yield产生数据，例如斐波那契数列，就不会出现在其他语言中while True时遇到的无限循环的例子</span><br><span class=\"line\"> \tdef fib():</span><br><span class=\"line\"> \t\ta,b &#x3D; 0,1</span><br><span class=\"line\"> \t\twhile True:</span><br><span class=\"line\"> \t\t\tyield a</span><br><span class=\"line\"> \t\t\ta,b &#x3D; b,a+b</span><br><span class=\"line\"> \tfrom itertools import islice</span><br><span class=\"line\"> \tprint(list(islice(fib(),5)))  #[0，1，1，2，3]</span><br></pre></td></tr></table></figure>\n\n<p>4.</p>\n"},{"_content":"Synonyms\n\n今天 “爱可可爱生活” 推荐的句子相似度和近义词的第三方包  Synonyms 测试了一下\n\n看了一下里面的句子相似度算法\n\n大致流程\n\n1.句子分词 去 停用词\n\n2.对句子中的词 通过word2vec 计算词向量\n\n3.然后计算当前词的10个近义词  并获取近义词的 词向量\n\n4.将当前词和近义词的词向量进行 横向求平均  得到一个平均的词向量\n\n5.对整个句子的词向量进行横向求和  得到一个一维的句子向量\n\n6.然后对另一个句子同样的操作求的句子向量\n\n7.然后求两个句子向量的范式(可以理解为句子向量距离）的导数\n\n8.同时求得两个句子的编辑距离\n\n9.将两个值加权求和  即作为两个句子的相似度","source":"_posts/源码算法.md","raw":"---\ncategories: 随笔\n---\nSynonyms\n\n今天 “爱可可爱生活” 推荐的句子相似度和近义词的第三方包  Synonyms 测试了一下\n\n看了一下里面的句子相似度算法\n\n大致流程\n\n1.句子分词 去 停用词\n\n2.对句子中的词 通过word2vec 计算词向量\n\n3.然后计算当前词的10个近义词  并获取近义词的 词向量\n\n4.将当前词和近义词的词向量进行 横向求平均  得到一个平均的词向量\n\n5.对整个句子的词向量进行横向求和  得到一个一维的句子向量\n\n6.然后对另一个句子同样的操作求的句子向量\n\n7.然后求两个句子向量的范式(可以理解为句子向量距离）的导数\n\n8.同时求得两个句子的编辑距离\n\n9.将两个值加权求和  即作为两个句子的相似度","slug":"源码算法","published":1,"date":"2020-01-02T09:16:18.824Z","updated":"2020-01-02T09:16:18.824Z","title":"源码算法","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4y00s9g000b6ds6g3460kpo","content":"<p>Synonyms</p>\n<p>今天 “爱可可爱生活” 推荐的句子相似度和近义词的第三方包  Synonyms 测试了一下</p>\n<p>看了一下里面的句子相似度算法</p>\n<p>大致流程</p>\n<p>1.句子分词 去 停用词</p>\n<p>2.对句子中的词 通过word2vec 计算词向量</p>\n<p>3.然后计算当前词的10个近义词  并获取近义词的 词向量</p>\n<p>4.将当前词和近义词的词向量进行 横向求平均  得到一个平均的词向量</p>\n<p>5.对整个句子的词向量进行横向求和  得到一个一维的句子向量</p>\n<p>6.然后对另一个句子同样的操作求的句子向量</p>\n<p>7.然后求两个句子向量的范式(可以理解为句子向量距离）的导数</p>\n<p>8.同时求得两个句子的编辑距离</p>\n<p>9.将两个值加权求和  即作为两个句子的相似度</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Synonyms</p>\n<p>今天 “爱可可爱生活” 推荐的句子相似度和近义词的第三方包  Synonyms 测试了一下</p>\n<p>看了一下里面的句子相似度算法</p>\n<p>大致流程</p>\n<p>1.句子分词 去 停用词</p>\n<p>2.对句子中的词 通过word2vec 计算词向量</p>\n<p>3.然后计算当前词的10个近义词  并获取近义词的 词向量</p>\n<p>4.将当前词和近义词的词向量进行 横向求平均  得到一个平均的词向量</p>\n<p>5.对整个句子的词向量进行横向求和  得到一个一维的句子向量</p>\n<p>6.然后对另一个句子同样的操作求的句子向量</p>\n<p>7.然后求两个句子向量的范式(可以理解为句子向量距离）的导数</p>\n<p>8.同时求得两个句子的编辑距离</p>\n<p>9.将两个值加权求和  即作为两个句子的相似度</p>\n"},{"_content":"![](aaaa.png)\n","source":"_posts/爬虫策略.md","raw":"---\ncategories: 随笔\n---\n![](aaaa.png)\n","slug":"爬虫策略","published":1,"date":"2020-01-03T10:15:41.690Z","updated":"2020-01-03T10:15:41.690Z","title":"爬虫策略","_id":"ck4y00s9i000d6ds6bk0y21rb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/2020/01/03/%E7%88%AC%E8%99%AB%E7%AD%96%E7%95%A5/aaaa.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2020/01/03/%E7%88%AC%E8%99%AB%E7%AD%96%E7%95%A5/aaaa.png\" alt></p>\n"},{"title":"移动数字金融与电子商务反欺诈白皮书","date":"2020-01-02T12:07:12.000Z","_content":" \n{% pdf book_1.pdf %}","source":"_posts/移动数字金融与电子商务反欺诈白皮书.md","raw":"---\ntitle: 移动数字金融与电子商务反欺诈白皮书\ndate: 2020-01-02 20:07:12\ntags: 金融\ncategories: work\n---\n \n{% pdf book_1.pdf %}","slug":"移动数字金融与电子商务反欺诈白皮书","published":1,"updated":"2020-01-03T10:21:36.573Z","_id":"ck4y00s9k000f6ds6ge3eguz6","comments":1,"layout":"post","photos":[],"link":"","content":"\n\n\t<div class=\"row\">\n    <embed src=\"book_1.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n","site":{"data":{}},"excerpt":"","more":"\n\n\t<div class=\"row\">\n    <embed src=\"book_1.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n"}],"PostAsset":[{"_id":"source/_posts/爬虫策略/aaaa.png","slug":"aaaa.png","post":"ck4y00s9i000d6ds6bk0y21rb","modified":0,"renderable":0},{"_id":"source/_posts/移动数字金融与电子商务反欺诈白皮书/book_1.pdf","slug":"book_1.pdf","post":"ck4y00s9k000f6ds6ge3eguz6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck4y00s9a00046ds6bdjlh117","category_id":"ck4y00s9700026ds6b58r9dbt","_id":"ck4y00s9e00096ds61uem72yu"},{"post_id":"ck4y00s8y00006ds6ae3kfru6","category_id":"ck4y00s9700026ds6b58r9dbt","_id":"ck4y00s9h000c6ds6cipbcx4j"},{"post_id":"ck4y00s9b00056ds6b26zhq4u","category_id":"ck4y00s9700026ds6b58r9dbt","_id":"ck4y00s9j000e6ds6d1xh5j6l"},{"post_id":"ck4y00s9c00076ds62ywo0cwn","category_id":"ck4y00s9c00066ds61p88hscu","_id":"ck4y00s9l000g6ds66zhj370u"},{"post_id":"ck4y00s9500016ds6b7bx90f5","category_id":"ck4y00s9c00066ds61p88hscu","_id":"ck4y00s9l000h6ds62pyg20gx"},{"post_id":"ck4y00s9e00086ds6fwe5f9bk","category_id":"ck4y00s9700026ds6b58r9dbt","_id":"ck4y00s9n000k6ds677dxcnuo"},{"post_id":"ck4y00s9g000b6ds6g3460kpo","category_id":"ck4y00s9700026ds6b58r9dbt","_id":"ck4y00s9n000l6ds6boujfdr2"},{"post_id":"ck4y00s9800036ds6endn50ie","category_id":"ck4y00s9700026ds6b58r9dbt","_id":"ck4y00s9n000m6ds6g5huc8tt"},{"post_id":"ck4y00s9i000d6ds6bk0y21rb","category_id":"ck4y00s9700026ds6b58r9dbt","_id":"ck4y00s9o000o6ds6hcz6ggj3"},{"post_id":"ck4y00s9k000f6ds6ge3eguz6","category_id":"ck4y00s9m000i6ds64i2o2eqn","_id":"ck4y00s9o000p6ds61pqs032v"}],"PostTag":[{"post_id":"ck4y00s9k000f6ds6ge3eguz6","tag_id":"ck4y0dmt10000afs6f6os9b0m","_id":"ck4y0dmt50001afs6bngx9z0h"}],"Tag":[{"name":"金额","_id":"ck4y00s9m000j6ds64wil4t35"},{"name":"金融","_id":"ck4y0dmt10000afs6f6os9b0m"}]}}